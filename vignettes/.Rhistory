get_data(predictor="p_rope", outcome="sig_001", lbound=0, ubound=95)
) %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_001, color=index)) +
geom_line(size=1) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("p_map" = "#f44336", "p_direction" = "#2196F3", "rope" = "#4CAF50", "rope_full" = "#FFC107", "p_rope"="#FF5722")) +
ylab("Probability of being significant at p < .001\n")
rbind(
get_data(predictor="p_map", outcome="sig_001", lbound=0, ubound=0.02),
get_data(predictor="p_direction", outcome="sig_001", lbound=99.5, ubound=100),
get_data(predictor="rope", outcome="sig_001", lbound=0, ubound=0.01),
get_data(predictor="rope_full", outcome="sig_001", lbound=0, ubound=0.005),
get_data(predictor="p_rope", outcome="sig_001", lbound=95, ubound=100)
) %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_001, color=index)) +
geom_line(size=1) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("p_frequentist"="#607D8B", "p_map" = "#E91E63", "p_direction" = "#2196F3",
"rope" = "#FF9800", "rope_full" = "#FF5722", "p_rope"="#FFC107")) +
ylab("Probability of being significant at p < .001\n")
rbind(
get_data(predictor="p_map", outcome="sig_01", lbound=0, ubound=0.1),
get_data(predictor="p_direction", outcome="sig_01", lbound=98, ubound=100),
get_data(predictor="rope", outcome="sig_01", lbound=0, ubound=0.02),
get_data(predictor="rope_full", outcome="sig_01", lbound=0, ubound=0.02),
get_data(predictor="p_rope", outcome="sig_01", lbound=90, ubound=100)
) %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_01, color=index)) +
geom_line(size=1) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("p_frequentist"="#607D8B", "p_map" = "#E91E63", "p_direction" = "#2196F3",
"rope" = "#FF9800", "rope_full" = "#FF5722", "p_rope"="#FFC107"), guide=FALSE) +
ylab("Probability of being significant at p < .01\n")
df %>%
ggplot(aes(x = rope, y = rope_full, color=p_frequentist)) +
geom_point(shape=16, alpha=0.2) +
theme_classic()
for(noise in c(0.1, seq(2.5, 5, by=2.5))){
print(noise)
for(effect in c(0, 1)){
for(prior in c(0, 1)){
for(sample_size in c(20, 40, 60)){
for(i in 1:800){ # 1000
cat(".")
data <- generate_data(sample_size, noise, effect)
freq_model <- lm(y ~ x, data=data)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x,
data=data,
chains=2,
prior=normal(location=prior)))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
df <- rbind(df,
data.frame(effect=effect,
noise=noise,
sample_size=sample_size,
prior=prior,
prior_correct=abs(1-abs(effect-prior)),
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
}
write.csv(df, "../data/bayes_indices.csv")
}
df <- read.csv("../data/bayes_indices.csv")
# df <- data.frame() # Uncomment this if you want to reset the data
for(noise in c(0.1, seq(2.5, 5, by=2.5))){
print(noise)
for(effect in c(0, 1)){
for(prior in c(0, 1)){
for(sample_size in c(20, 40, 60)){
for(i in 1:800){ # 1000
cat(".")
data <- generate_data(sample_size, noise, effect)
freq_model <- lm(y ~ x, data=data)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x,
data=data,
chains=2,
prior=normal(location=prior)))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
df <- rbind(df,
data.frame(effect=effect,
noise=noise,
sample_size=sample_size,
prior=prior,
prior_correct=abs(1-abs(effect-prior)),
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
}
write.csv(df, "../data/bayes_indices.csv")
}
setwd("C:/Users/Dom/Dropbox/RECHERCHE/N/bayestestR/vignettes")
df <- read.csv("../data/bayes_indices.csv")
# df <- data.frame() # Uncomment this if you want to reset the data
for(noise in c(0.1, seq(2.5, 5, by=2.5))){
print(noise)
for(effect in c(0, 1)){
for(prior in c(0, 1)){
for(sample_size in c(20, 40, 60)){
for(i in 1:800){ # 1000
cat(".")
data <- generate_data(sample_size, noise, effect)
freq_model <- lm(y ~ x, data=data)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x,
data=data,
chains=2,
prior=normal(location=prior)))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
df <- rbind(df,
data.frame(effect=effect,
noise=noise,
sample_size=sample_size,
prior=prior,
prior_correct=abs(1-abs(effect-prior)),
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
}
write.csv(df, "../data/bayes_indices.csv")
}
# df <- read.csv("https://raw.github.com/DominiqueMakowski/bayestestR/master/data/bayes_indices.csv")
df <- read.csv("../data/bayes_indices.csv")
data <- generate_data(sample_size, noise, effect)
freq_model <- lm(y ~ x, data=data)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x,
data=data,
chains=2,
prior=normal(location=prior)))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
df <- rbind(df,
data.frame(effect=effect,
noise=noise,
sample_size=sample_size,
prior=prior,
prior_correct=abs(1-abs(effect-prior)),
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
df <- data.frame() # Uncomment this if you want to reset the data
for(noise in c(0.1, seq(2.5, 5, by=2.5))){
print(noise)
for(effect in c(0, 1)){
for(prior in c(0, 1)){
for(sample_size in c(20, 40, 60)){
for(i in 1:5){ # 1000
cat(".")
data <- generate_data(sample_size, noise, effect)
freq_model <- lm(y ~ x, data=data)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x,
data=data,
chains=2,
prior=normal(location=prior)))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
df <- rbind(df,
data.frame(effect=effect,
noise=noise,
sample_size=sample_size,
prior=prior,
prior_correct=abs(1-abs(effect-prior)),
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
}
write.csv(df, "../data/bayes_indices.csv", row.names = FALSE)
}
df <- read.csv("../data/bayes_indices.csv")
# df <- data.frame() # Uncomment this if you want to reset the data
for(noise in c(0.1, seq(2.5, 5, by=2.5))){
print(noise)
for(effect in c(0, 1)){
for(prior in c(0, 1)){
for(sample_size in c(20, 40, 60)){
for(i in 1:5){ # 1000
cat(".")
data <- generate_data(sample_size, noise, effect)
freq_model <- lm(y ~ x, data=data)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x,
data=data,
chains=2,
prior=normal(location=prior)))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
df <- rbind(df,
data.frame(effect=effect,
noise=noise,
sample_size=sample_size,
prior=prior,
prior_correct=abs(1-abs(effect-prior)),
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
}
write.csv(df, "../data/bayes_indices.csv", row.names = FALSE)
}
library(bayestestR)
library(rstanarm)
library(broom)
# options(mc.cores = parallel::detectCores())
set.seed(333)
generate_data <- function(sample_size, noise, correlation=1){
data <- data.frame(x = scale(rnorm(sample_size, 0, 1)))
if(correlation==1){
data$y <- scale(data$x)
data$y <- data$y + rnorm(sample_size, mean = 0, sd = noise)
} else{
data$y <- scale(rnorm(sample_size, 0, 1))
}
return(data)
}
# df <- read.csv("https://raw.github.com/DominiqueMakowski/bayestestR/master/data/bayes_indices.csv")
# df <- read.csv("../data/bayes_indices.csv")
df <- data.frame() # Uncomment this if you want to reset the data
for(noise in c(0.1, seq(2.5, 5, by=2.5))){
print(noise)
for(effect in c(0, 1)){
for(prior in c(0, 1)){
for(sample_size in c(20, 40, 60)){
for(i in 1000){
cat(".")
data <- generate_data(sample_size, noise, effect)
freq_model <- lm(y ~ x, data=data)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x,
data=data,
chains=2,
prior=normal(location=prior)))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
df <- rbind(df,
data.frame(effect=effect,
noise=noise,
sample_size=sample_size,
prior=prior,
prior_correct=abs(1-abs(effect-prior)),
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
}
write.csv(df, "../data/bayes_indices.csv", row.names = FALSE)
}
# options(mc.cores = parallel::detectCores())
set.seed(333)
generate_data <- function(sample_size, noise, correlation=1){
data <- data.frame(x = scale(rnorm(sample_size, 0, 1)))
if(correlation==1){
data$y <- scale(data$x)
data$y <- data$y + rnorm(sample_size, mean = 0, sd = noise)
} else{
data$y <- scale(rnorm(sample_size, 0, 1))
}
return(data)
}
# df <- read.csv("https://raw.github.com/DominiqueMakowski/bayestestR/master/data/bayes_indices.csv")
# df <- read.csv("../data/bayes_indices.csv")
df <- data.frame() # Uncomment this if you want to reset the data
for(noise in c(0.1, seq(2.5, 5, by=2.5))){
print(noise)
for(effect in c(0, 1)){
for(prior in c(0, 1)){
for(sample_size in c(20, 40, 60)){
for(i in 1:1000){
cat(".")
data <- generate_data(sample_size, noise, effect)
freq_model <- lm(y ~ x, data=data)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x,
data=data,
chains=2,
prior=normal(location=prior)))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
df <- rbind(df,
data.frame(effect=effect,
noise=noise,
sample_size=sample_size,
prior=prior,
prior_correct=abs(1-abs(effect-prior)),
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
}
write.csv(df, "../data/bayes_indices.csv", row.names = FALSE)
}
data.frame(effect=effect,
noise=noise,
sample_size=sample_size,
prior=prior,
prior_correct=abs(1-abs(effect-prior)),
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map)
effect
abs(1-abs(effect-prior))
i
beta
median
mean
map
p_frequentist
p_direction
rope
rope_full
p_rope
p_map
bounds = c(-0.1, 0.1)
precision=0.1
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
plot(rope_values)
plot(density(posterior))
min_rope <- min(rope_values)
min_rope
rope_values[1]
name_max <- names(rope_values[rope_values != max(rope_values)][1])
match(name_max, names(rope_values))
name_max <- names(rope_values[rope_values != max(rope_values)][1])
rope_values[1]
plot(density(posterior))
plot(rope_values)
match(name_max, names(rope_values))
name_max
names(rope_values)
match(name_max, names(rope_values))
if(CI_position>1) CI_position <- CI_position-1
CI_position <- match(name_max, names(rope_values))
if(CI_position>1) CI_position <- CI_position-1
CI_position
