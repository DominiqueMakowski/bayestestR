setwd("C:/Users/Dom/Dropbox/RECHERCHE/N/bayestestR/vignettes")
library(bayestestR)
set.seed(333)
data <- data.frame(x = scale(rnorm(100, 0, 1)))
data$y <- scale(0.2*data$x)
parameter <- data.frame()
for(noise in c(0.1, 1)){
df <- data
df$y <- df$y + rnorm(100, mean = 0, sd = noise)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)
parameter <- rbind(parameter,
data.frame(noise=noise,
beta = beta,
median = median,
mean = mean,
map = map))
}
parameter
data.frame(noise=noise,
beta = beta,
median = median,
mean = mean,
map = map)
map <- map_estimate(posterior)
posterior
parameter <- data.frame()
for(noise in c(0.1, 1)){
df <- data
df$y <- df$y + rnorm(100, mean = 0, sd = noise)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
parameter <- rbind(parameter,
data.frame(noise=noise,
beta = beta,
median = median,
mean = mean,
map = map))
}
parameter
set.seed(333)
data <- data.frame(x = scale(rnorm(100, 0, 1)))
data$y <- scale(0.2*data$x)
parameter <- data.frame()
for(noise in c(0.1, 0.5, 1, 2)){
for(i in 1:10){
df <- data
df$y <- df$y + rnorm(100, mean = 0, sd = noise)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
parameter <- rbind(parameter,
data.frame(noise=noise,
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map))
}
}
library(ggplot2)
library(dplyr)
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise)
library(tidyr)
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise)
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
ggplot(aes(x=noise, y=value, color=estimate)) +
geom_violin()
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
ggplot(aes(x=noise, y=value, fill=estimate)) +
geom_violin() +
geom_hline(yintercept=1)
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
ggplot(aes(x=noise, y=value, fill=estimate, group=1)) +
geom_violin() +
geom_hline(yintercept=1)
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
ggplot(aes(x=noise, y=value, fill=estimate, group=noise)) +
geom_violin() +
geom_hline(yintercept=1)
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
ggplot(aes(x=noise, y=value, fill=estimate, group=estimate)) +
geom_violin() +
geom_hline(yintercept=1)
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
ggplot(aes(x=noise, y=value, fill=estimate)) +
geom_boxplot() +
geom_hline(yintercept=1)
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise)
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
ggplot(aes(x=noise, y=value, fill=interaction(noise, estimate))) +
geom_boxplot() +
geom_hline(yintercept=1)
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
ggplot(aes(x=noise, y=value, fill=interaction(noise, estimate))) +
geom_violin() +
geom_hline(yintercept=1)
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
ggplot(aes(x=noise, y=value, fill=estimate, group=interaction(noise, estimate))) +
geom_violin() +
geom_hline(yintercept=1)
set.seed(333)
data <- data.frame(x = scale(rnorm(100, 0, 1)))
data$y <- scale(0.2*data$x)
parameter <- data.frame()
for(noise in c(0.1, 0.5, 1, 1.5, 2)){
for(i in 1:100){
df <- data
df$y <- df$y + rnorm(100, mean = 0, sd = noise)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
parameter <- rbind(parameter,
data.frame(noise=noise,
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map))
}
}
set.seed(333)
data <- data.frame(x = scale(rnorm(100, 0, 1)))
data$y <- scale(0.2*data$x)
parameter <- data.frame()
for(noise in c(0.1, 0.5, 1, 1.5, 2)){
print(noise)
for(i in 1:100){
cat(".")
df <- data
df$y <- df$y + rnorm(100, mean = 0, sd = noise)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
parameter <- rbind(parameter,
data.frame(noise=noise,
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map))
}
}
set.seed(333)
data <- data.frame(x = scale(rnorm(50, 0, 1)))
data$y <- scale(0.2*data$x)
parameter <- data.frame()
for(noise in c(0.1, 0.5, 1, 1.5, 2)){
print(noise)
for(i in 1:100){
cat(".")
df <- data
df$y <- df$y + rnorm(50, mean = 0, sd = noise)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
parameter <- rbind(parameter,
data.frame(noise=noise,
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map))
}
}
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
ggplot(aes(x=noise, y=value, fill=estimate, group=interaction(noise, estimate))) +
geom_violin() +
geom_hline(yintercept=1) +
theme_classic()
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
ggplot(aes(x=noise, y=value, fill=estimate, group=interaction(noise, estimate))) +
geom_boxplot() +
geom_hline(yintercept=1) +
theme_classic()
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
ggplot(aes(x=as.factor(noise), y=value, fill=estimate)) +
geom_boxplot() +
geom_hline(yintercept=1) +
theme_classic()
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
mutate(noise = as.factor(noise)) %>%
ggplot(aes(x=noise, y=value, fill=estimate)) +
geom_boxplot() +
geom_hline(yintercept=1) +
theme_classic()
pd = pd(posterior)
pd
rope <- rope(posterior, rope = c(-0.1, 0.1))
rope
odds <- odds_h0(posterior)
odds
odds
set.seed(333)
data <- data.frame(x = scale(rnorm(50, 0, 1)))
data$y <- scale(0.2*data$x)
parameter <- data.frame()
for(noise in c(0.1, 1, 2, 3)){
print(noise)
for(i in 1:10){
cat(".")
df <- data
df$y <- df$y + rnorm(50, mean = 0, sd = noise)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
pd <- pd(posterior)
rope <- rope(posterior, rope = c(-0.1, 0.1))
logodds <- log(odds_h0(posterior))
parameter <- rbind(parameter,
data.frame(noise=noise,
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p = p,
pd = pd,
rope = rope,
logodds = logodds))
}
}
seq(0.1, 3)
seq(1, 3)
parameter %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
mutate(noise = as.factor(noise)) %>%
ggplot(aes(x=noise, y=value, fill=estimate)) +
geom_boxplot() +
geom_hline(yintercept=1) +
theme_classic()
parameter %>%
select(noise, p, pd, rope, logodds) %>%
gather(index, value, -noise, -p) %>%
mutate(noise = as.factor(noise),
p = as.factor(p))
parameter %>%
select(noise, p, pd, rope, logodds) %>%
gather(index, value, -noise, -p) %>%
mutate(noise = as.factor(noise),
p = as.factor(p)) %>%
ggplot(aes(x=p, y=value)) +
geom_point() +
geom_smooth() +
facet_wrap(~index) +
theme_classic()
parameter %>%
select(noise, p, pd, rope, logodds) %>%
gather(index, value, -noise, -p) %>%
mutate(noise = as.factor(noise),
p = as.factor(p)) %>%
ggplot(aes(x=p, y=value)) +
geom_point() +
geom_smooth() +
facet_wrap(~index, scales="free") +
theme_classic()
parameter %>%
select(noise, p, pd, rope, logodds) %>%
gather(index, value, -noise, -p) %>%
mutate(noise = as.factor(noise),
p = as.factor(p)) %>%
ggplot(aes(x=p, y=value, color=index)) +
geom_point() +
geom_smooth() +
facet_wrap(~index, scales="free") +
theme_classic()
parameter %>%
select(noise, p, pd, rope, logodds) %>%
gather(index, value, -noise, -p) %>%
ggplot(aes(x=p, y=value, color=index)) +
geom_point() +
geom_smooth() +
facet_wrap(~index, scales="free") +
theme_classic()
parameter %>%
select(noise, p, pd, rope, logodds) %>%
gather(index, value, -noise, -p) %>%
ggplot(aes(x=p, y=value, color=index)) +
geom_point() +
geom_smooth() +
facet_wrap(~index, scales="free") +
theme_classic() +
theme(strip.background = element_blank())
parameter %>%
select(noise, p, pd, rope, logodds) %>%
gather(index, value, -noise, -p) %>%
ggplot(aes(x=p, y=value, color=index)) +
geom_point() +
geom_smooth(method="loess") +
facet_wrap(~index, scales="free") +
theme_classic() +
theme(strip.background = element_blank())
