---
title: "Visual Art Items Selection"
author: ""
date: ''
output:
  html_document:
    theme: journal
    footer: Makowski et al. (2019)
    highlight: pygments
    toc: yes
    toc_depth: 3
    toc_float: yes
    df_print: "kable"
    code_folding: hide
  word_document:
    toc: yes
    toc_depth: 3
    df_print: "kable"
    highlight: "pygments"
    reference_docx: Template_Supplementary_Materials.docx
  github_document:
    toc: yes
    toc_depth: 3
editor_options:
  chunk_output_type: console
---


```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(echo = TRUE,
                      warnings=FALSE,
                      fig.width=10,
                      fig.height=6,
                      message=FALSE)
options(knitr.table.format = "markdown")
```

<style type="text/css">
.main-container {
  max-width: 1440px !important;
  margin-left: auto;
  margin-right: auto;
}
</style>


# Packages and Parameters

```{r message=FALSE, warning=FALSE}
library(NbClust)  
library(factoextra)
library(fpc)
library(dbscan)

library(tidygraph)
library(ggraph)

library(tidyverse)
library(gridExtra)
library(modelr)
library(plotly)

library(psycho)
```

```{r message=FALSE, warning=FALSE}
set.seed(333)

n_by_style <- 20
n_by_artist <- 2
minimum_resolution <- 1600*900
```

# Data

```{r message=FALSE, warning=FALSE}
df <- read.csv("Data/data_full.csv", row.names="X") %>% 
  mutate(WH_Ratio = Width / Height, # Format
         Quality = Width * Height,  # Resolution
         File_Name = stringr::str_split_fixed(Path, "/", n=2)[,2]) 
```

The original sample consisted in `r nrow(df)` items

## Original Properties Distribution

```{r message=FALSE, warning=FALSE}
df %>% 
  select(WH_Ratio,
         Quality,
         starts_with("LAB"),
         Entropy) %>% 
  gather(Index, Value) %>% 
  ggplot(aes(x=Value, fill=Index)) +
  geom_density() +
  facet_wrap(~Index, scales = "free") +
  theme_classic() +
  theme(strip.background = element_blank(),
        legend.position = "none")
```


# Exclusion Criteria

## Type

```{r message=FALSE, warning=FALSE}
# Not paintings / with frame / writings
df <- df %>% 
  filter(!File_Name %in% c("akseli-gallen-kallela_ilmarinen-ploughing-the-viper-field-and-the-defense-of-the-sampo-1928.jpg",
                           "alexander-calder_calder-s-circus-1931.jpg",
                           "constantin-brancusi_table-of-silence-1907.jpg",
                           "hans-holbein-the-younger_a-school-teacher-explaining-the-meaning-of-a-letter-to-illiterate-workers-1516.jpg",
                           "hans-holbein-the-younger_principles-of-a-schoolmaster-teaching-scene-for-children-1516.jpg",
                           "antoine-watteau_not_detected_229434-1715.jpg",
                           "forrest-bess_spots-1967.jpg",
                           "franz-stuck_sphinx-1904.jpg",
                           "georges-braque_birds-in-the-clouds-1960.jpg",
                           "giovanni-battista-tiepolo_apollo-leads-frederick-barbarossa-beatrix-of-burgundy-1753.jpg",
                           "gwen-john_study-of-marigolds-1918.jpg",
                           "gustav-klimt_two-studies-of-sitting-nudes-1902.jpg",
                           "jacob-jordaens_the-father-of-the-psyche-consultants-of-oracle-in-the-temple-of-apollo-1652.jpg",
                           "kathe-kollwitz_not_detected_235973.jpg",
                           "taras-shevchenko_st-michael-s-church-in-pereiaslav-khmelnytskyi-1845.jpg",
                           "taras-shevchenko_cathedral-of-ascension-in-pereiaslav-1845.jpg",
                           "lucas-cranach-the-elder_law-and-grace-1529.jpg"))

# Drawings
df <- df %>% 
  filter(!File_Name %in% c("anna-ostroumova-lebedeva_fontanka-1922.jpg",
                           "anna-ostroumova-lebedeva_st-isaac-s-cathedral-in-a-foggy-day-1922.jpg",
                           "karl-bodmer_punka-indians-encamped-on-the-banks-of-the-missouri-plate-11-from-volume-1-of-travels-in-the-1843.jpg",
                           "paula-modersohn-becker_sketch-with-six-figure-compositions-1907.jpg",
                           "paula-modersohn-becker_three-women-at-a-market-stall-1906.jpg",
                           "vasile-kazar_the-song-1972.jpg",
                           "vasily-sadovnikov_policeman-bridge-in-the-1830s-now-green-bridge.jpg",
                           "william-hogarth_mary-toft-apparently-giving-birth-to-rabbits-1726.jpg"))

# Pictures
df <- df %>% 
  filter(!File_Name %in% c("thomas-eakins_thomas-eakins-and-j-laurie-wallace-1883.jpg",
                           "thomas-eakins_thomas-eakins-and-j-laurie-wallace-1883-1.jpg"))
```




## Dimension

```{r message=FALSE, warning=FALSE}
df <- df %>% 
  filter(WH_Ratio >= 1 & WH_Ratio < 3) %>% 
  filter(!is.na(Date)) 
```


```{r message=FALSE, warning=FALSE}
df$WH_Ratio %>% 
  density(n = 1e+04) %>% 
  as.data.frame() %>% 
  mutate(WH_Ratio_Distance = abs(x - find_highest_density_point(df$WH_Ratio))) %>% 
  ggplot(aes(x=x, y=y, colour=WH_Ratio_Distance)) + 
  geom_segment(aes(yend=0, xend=x)) +
  theme_classic() +
  scale_colour_gradient(low = 'green', high = 'red') +
  xlab("WH Ratio") +
  ylab("Density") +
  geom_vline(aes(xintercept=find_highest_density_point(df$WH_Ratio)), color="red") +
  geom_vline(aes(xintercept=psycho::HDImin(df$WH_Ratio, 0.66))) +
  geom_vline(aes(xintercept=psycho::HDImax(df$WH_Ratio, 0.66)))
``` 

```{r message=FALSE, warning=FALSE}
df <- df %>% 
  filter(WH_Ratio >= psycho::HDImin(df$WH_Ratio, 0.66),
         WH_Ratio <= psycho::HDImax(df$WH_Ratio, 0.66))
```



## Quality

```{r message=FALSE, warning=FALSE}
df <- df %>% 
  filter(Quality >= minimum_resolution & Quality <= 1e+07)
```

```{r message=FALSE, warning=FALSE}
df %>% 
  ggplot(aes(x=Quality)) +
  geom_density(fill="lightblue") +
  theme_classic()
```




## Outliers Treatment


We detected outliers using the new and superior method for multivariate outlier detection based on Invariant Coordinate Selection (ICS; Archimbaud, 2016).

```{r message=FALSE, warning=FALSE}
outliers <- df %>%
  select(starts_with("LAB"),
         Entropy) %>%
  psycho::standardize() %>%
  purrr::keep(is.numeric) %>%
  ICS::ics2() %>%
  ICSOutlier::ics.outlier(ncores=parallel::detectCores(), iseed = 123)  # This can take some time

save(outliers,  file="Data/outliers.rdata")
load("Data/outliers.rdata")


df <- df %>%
  dplyr::mutate(Outlier = outliers@outliers)

print(outliers)
summary(outliers)
plot(outliers@ics.distances)

df <- df %>%
  dplyr::filter(Outlier == 0) %>%
  dplyr::select(-Outlier) %>%
  droplevels()
```




# Clustering within Style

```{r message=FALSE, warning=FALSE}
df$Style_Distance <- NA
for(style in unique(df$Style)){
  if(nrow(filter(df, Style == style)) < 2) next

  dfclust <- df %>% 
    filter(Style == style) %>% 
    select(starts_with("LAB"), Entropy) %>% 
    standardize() %>% 
    as.matrix()
  km <- kmeans(dfclust, centers=1)
  df[df$Style == style, ]$Style_Distance <- find_distance_cluster(dfclust, km)
}
```


# Final Selection






## Selection

```{r message=FALSE, warning=FALSE}
# Find styles with enough items
styles_to_keep <- df %>% 
  group_by(Style) %>% 
  summarise(n = n()) %>% 
  filter(n >= n_by_style)  %>% 
  droplevels() %>% 
  pull(Style)

# Do the selection
df_final <- df %>% 
  filter(Style %in% styles_to_keep) %>% 
  droplevels() %>% 
  group_by(Artist) %>% 
  top_n(Style_Distance, n=n_by_artist) %>% 
  ungroup() %>% 
  group_by(Style) %>% 
  top_n(Style_Distance, n=n_by_style) %>% 
  filter(n() == n_by_style) %>% 
  ungroup() %>% 
  arrange(Style, Artist, Style_Distance) 
```

```{r message=FALSE, warning=FALSE}
df_final %>% 
  group_by(Style) %>% 
  summarise(n = n()) %>% 
  knitr::kable()
```


## Properties Distribution

```{r message=FALSE, warning=FALSE}
p <- df_final %>%
  select(starts_with("LAB"),
         Entropy,
         Style) %>%
  gather(Index, Value, -Style) %>%
  ggplot(aes(x=Value, fill=Index)) +
  geom_density() +
  facet_grid(Style ~ Index, scales="free") +
  theme_classic() +
  theme(strip.background = element_blank(),
        legend.position = "none")
ggplotly(p)
```


# Clustering accross Styles

```{r message=FALSE, warning=FALSE}
dfclust <- df_final %>% 
    select(starts_with("LAB"), Entropy) %>% 
    standardize() %>% 
    as.matrix()

print(NbClust::NbClust(dfclust, method="kmean"))

km <- kmeans(dfclust, centers=3)

df_final$Cluster_Distance <- find_distance_cluster(dfclust, km)
  
df_final$Cluster <- km$cluster
```

```{r message=FALSE, warning=FALSE}
df_final %>% 
  group_by(Style, Cluster) %>% 
  summarise(n = n()) %>% 
  spread(Cluster, n) %>% 
  knitr::kable()
```

## Properties of Clusters
```{r message=FALSE, warning=FALSE}
p <- df_final %>%
  select(starts_with("LAB"),
         Entropy,
         Cluster) %>%
  gather(Index, Value, -Cluster) %>%
  ggplot(aes(x=Value, fill=Index)) +
  geom_density() +
  facet_grid(Cluster ~ Index, scales="free") +
  theme_classic() +
  theme(strip.background = element_blank(),
        legend.position = "none")
ggplotly(p)
```


# Save

```{r message=FALSE, warning=FALSE}
df_final <- df_final %>% 
  select(-Format, -Extension, -Mode)
write.csv(df_final, file = "Data/data_selection.csv", row.names = FALSE)
```




<!-- We will apply DBSCAN, a density-based clustering algorithm, introduced in Ester et al. 1996, which can be used to identify clusters of any shape in data set containing noise and outliers. Advantages are: -->

<!-- - Unlike to K-means, DBSCAN does not require the user to specify the number of clusters to be generated -->
<!-- - DBSCAN can find any shape of clusters. The cluster doesnâ€™t have to be circular. -->
<!-- - DBSCAN can identify outliers -->


<!-- ```{r message=FALSE, warning=FALSE} -->
<!-- dfclust <- df_final %>% -->
<!--     select(starts_with("LAB"), Entropy) %>% -->
<!--     standardize() %>% -->
<!--     as.matrix() -->

<!-- # Finding good eps value (the "elbow"). K corresponds to minimum points by cluster. -->
<!-- dbscan::kNNdistplot(dfclust, k =  10) -->

<!-- # Apply DBSCAN -->
<!-- db <- dbscan::dbscan(dfclust, eps = 2, minPts = 10) -->

<!-- # Plot DBSCAN results -->
<!-- plot(db, dfclust) -->

<!-- # Print results -->
<!-- print(db) -->
<!-- ``` -->




<!-- ```{r message=FALSE, warning=FALSE, include=FALSE} -->
<!-- library(beepr) -->
<!-- beepr::beep() -->

<!-- library(telegram.bot) -->
<!-- # file.edit(path.expand(file.path("~", ".Renviron")))  -->
<!-- bot = Bot(token = bot_token('domsRbot_bot')) -->
<!-- # bot$getUpdates() -->
<!-- bot$sendPhoto(chat_id = 738799366, photo = 'Plots/Figure4.png') -->
<!-- bot$sendMessage(chat_id = 738799366, text = "Done: part 4") -->

<!-- save.image(file="workspace.RData") -->
<!-- # load(file="workspace.Rdata") -->
<!-- ``` -->



# References

```{r warning=FALSE, message=FALSE}
sessionInfo() %>% 
  cite_packages() %>% 
  knitr::kable()
```









