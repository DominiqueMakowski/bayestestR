---
title: "bayestestR"
output: 
  rmarkdown::html_vignette:
    toc: true
author: 
- Dominique Makowski
date: "`r Sys.Date()`"
tags: [r, bayesian, posterior, test]
abstract: |
  Overview of bayestestR. 
vignette: >
  %\VignetteIndexEntry{Overview}
  %\VignetteDepends{ggplot2}
  \usepackage[utf8]{inputenc}
  %\VignetteEngine{knitr::rmarkdown}
editor_options: 
  chunk_output_type: console
---



------


# Functions


- **`bayes_p()`**: Compute a Bayesian equivalent p value, related to the odds that a parameter (described by its posterior distribution) has againt the null hypothesis (h0) using Mills' (2014, 2017) Objective Bayesian Hypothesis Testing paradigm.

```R
bayes_p(posterior = rnorm(1000, 0, 1))
bayes_p(posterior = rnorm(1000, 10, 1))
```


- **`rope()`**: Compute the proportion of the HDI of a posterior distribution that lies within a region of practical equivalence.

```R
rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
```

- **`rope_overlap()`**: Compute how much of the posterior distribution is within a distributed region of practical equivalence.

```R
rope_overlap(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope_overlap(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope_overlap(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
```

- **`rope_test()`**: Perform a Test for Practical Equivalence based on the "HDI+ROPE decision rule" (Kruschke 2018) to check whether parameter values should be accepted or rejected against an explicitely formulated "null hypothesis".

```R
rope_test(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
```


- **`pd()`**: Compute the Probability of Direction (pd, also known as the Maximum Probability of Effect - MPE). It varies between 50\% and 100\% and can be interpreted as the probability that a parameter (described by its posterior distribution) is positive or negative (following  the medianâ€™s sign). It is defined as the proportion of the posterior distribution of the median's sign.

```R
# Compute the pdSimulate a posterior distribution of mean 1 and SD 1
pd(rnorm(1000, mean = 1, sd = 1))
```

- **`hdi()`**: Compute the highest density interval (HDI) of a posterior distribution, i.e., the interval which contains all points within the interval have a higher probability density than points outside the interval.

```R
posterior <- rnorm(1000)
hdi(posterior, prob = 0.9)
hdi(posterior, prob = c(0.8, 0.9, 0.95))
```

- **`map_estimate()`**: Find the Highest Maximum A Posteriori (MAP) estimate of a posterior.

```R
posterior <- rnorm(1000)
map_estimate(posterior)
```

- **`rnorm_perfect()`**: Generate a sample of size n with a near-perfect normal distribution.

```R
x <- rnorm_perfect(n = 10)
plot(density(x))
```

- **`overlap()`**: Calculate the overlap coefficient between two kernel density estimates.


```R
overlap(x=rnorm(1000, 0, 1), y=rnorm(1000, 1, 1))
```

# Comparison of Indices


```{r message=FALSE, warning=FALSE}
library(rstanarm)
library(ggplot2)
library(dplyr)
library(tidyr)
```


## Generate Regression Data with Noise


```{r}

```

For the sake of time and computational space, we download the data from github. However, you can find the code to generate it again below.

```{r eval=FALSE, message=FALSE, warning=FALSE, results='hide'}
set.seed(333)

data <- data.frame(x = scale(rnorm(50, 0, 1)))
data$y <- scale(data$x)


bayes_indices <- data.frame()
for(noise in c(0.1, seq(0.5, 5, by=0.5))){
  print(noise)
  for(i in 1:10){
    cat(".")
    df <- data
    df$y <- df$y + rnorm(50, mean = 0, sd = noise)
    
    freq_model <- lm(y ~ x, data=df)
    summary(freq_model)
    beta <- broom::tidy(freq_model)[2, ]$estimate
    p <- broom::tidy(freq_model)[2, ]$p.value
    
    out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
    posterior <- as.data.frame(bayes_model)$x
    
    median <- median(posterior)
    mean <- mean(posterior)
    map <- map_estimate(posterior)[1]
    
    pd <- pd(posterior)
    rope <- rope(posterior, rope = c(-0.1, 0.1))
    rope_overlap <- rope_overlap(posterior, rope = c(-0.1, 0.1))
    bayes_p <- bayes_p(posterior)

    bayes_indices <- rbind(bayes_indices,
                       data.frame(noise=noise,
                                  iteration=i,
                                  beta = beta,
                                  median = median,
                                  mean = mean,
                                  map = map,
                                  p = p,
                                  pd = pd,
                                  rope = rope,
                                  rope_overlap = rope_overlap,
                                  bayes_p = bayes_p))
  }
}

write.csv(bayes_indices, "./data/bayes_indices.csv")
```




## Comparison of Parameter Point-Estimates

### Relationship with the theorethical true value (0)
```{r, eval=FALSE}
bayes_indices %>% 
  select(noise, beta, median, mean, map) %>% 
  gather(estimate, value, -noise) %>% 
  mutate(noise = as.factor(noise),
         value = value-1) %>% 
  ggplot(aes(x=noise, y=value, fill=estimate)) +
  geom_boxplot() +
  geom_hline(yintercept=0) +
  theme_classic() +
  scale_fill_manual(values=c("beta"="grey", "map"="red", "mean"="green", "median"="blue"))
```

### Relationship with the frequentist beta
```{r, eval=FALSE}
bayes_indices %>% 
  select(noise, beta, median, mean, map) %>% 
  gather(index, value, -noise, -beta) %>% 
  ggplot(aes(x=beta, y=value, color=index)) +
  geom_point() +
  geom_smooth(method="loess") +
  facet_wrap(~index, scales="free") +
  theme_classic() +
  theme(strip.background = element_blank()) +
  scale_color_manual(values=c("map"="red", "mean"="green", "median"="blue"))
```



## Comparison of Indices of Effect Existence

### Relationship with the Frequentist p value
```{r, eval=FALSE}
bayes_indices %>% 
  select(noise, p, pd, bayes_p, rope, rope_overlap) %>% 
  gather(index, value, -noise, -p) %>% 
  ggplot(aes(x=p, y=value, color=index)) +
  geom_point() +
  geom_smooth(method="loess") +
  facet_wrap(~index, scales="free") +
  theme_classic() +
  theme(strip.background = element_blank()) +
  scale_color_manual(values=c("bayes_p"="#f44336", "pd"="#2196F3", "rope"="#4CAF50", "rope_overlap"="#FFC107"))
```

### Relationship between the two ROPE indices
```{r, eval=FALSE}
bayes_indices %>% 
  ggplot(aes(x=rope, y=rope_overlap)) +
  geom_point() +
  geom_smooth(method="loess") +
  theme_classic() 
```

### Relationship with Noise

```{r, eval=FALSE}
bayes_indices %>% 
  select(noise, p, bayes_p, pd, rope, rope_overlap) %>% 
  gather(index, value, -noise) %>% 
  mutate(noise = as.factor(noise)) %>%
  ggplot(aes(x=noise, y=value, fill=index)) +
  geom_boxplot() +
  # geom_point() +
  # geom_smooth(method="loess") +
  facet_wrap(~index, scales="free") +
  theme_classic() +
  theme(strip.background = element_blank()) +
  scale_fill_manual(values=c("p"="#9C27B0", "bayes_p"="#f44336", "pd"="#2196F3", "rope"="#4CAF50", "rope_overlap"="#FFC107"))
```

```{r, eval=FALSE}
summary(lm(p ~ noise, data=bayes_indices))
summary(lm(bayes_p ~ noise, data=bayes_indices))
summary(lm(pd ~ noise, data=bayes_indices))
summary(lm(rope ~ noise, data=bayes_indices))
summary(lm(rope_overlap ~ noise, data=bayes_indices))
```

# Credits

Parts of the code in this package was inspired / shamelessly copied from other great packages that you must check out and cite, such as [sjstats](https://github.com/strengejacke/sjstats) or [BayesTesting.jl](https://github.com/tszanalytics/BayesTesting.jl). All credits go to their authors.

# Contribution

Improve this vignette by modifying [this](https://github.com/DominiqueMakowski/bayestestR/blob/master/vignettes/overview.Rmd) file!
