median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
bayes_indices <- rbind(bayes_indices,
data.frame(effect=correlation,
noise=noise,
sample_size=sample_size,
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
# write.csv(bayes_indices, "../data/bayes_indices.csv")
}
bayes_indices <- data.frame()
for(noise in c(0.1, seq(0.5, 5, by=0.5))){
print(noise)
for(correlation in c(0, 1)){
for(sample_size in c(10, 25, 40)){
for(i in 1:1){
cat(".")
df <- generate_data(sample_size, noise, correlation)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
bayes_indices <- rbind(bayes_indices,
data.frame(effect=correlation,
noise=noise,
sample_size=sample_size,
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
# write.csv(bayes_indices, "../data/bayes_indices.csv")
}
generate_data <- function(sample_size, noise, correlation=1){
data <- data.frame(x = scale(rnorm(sample_size, 0, 1)))
if(correlation==1){
data$y <- scale(data$x)
data$y <- data$y + rnorm(50, mean = 0, sd = noise)
} else{
data$y <- scale(rnorm(sample_size, 0, 1))
}
return(data)
}
bayes_indices <- data.frame()
for(noise in c(0.1, seq(0.5, 5, by=0.5))){
print(noise)
for(correlation in c(0, 1)){
for(sample_size in c(10, 25, 40)){
for(i in 1:1){
cat(".")
df <- generate_data(sample_size, noise, correlation)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
bayes_indices <- rbind(bayes_indices,
data.frame(effect=correlation,
noise=noise,
sample_size=sample_size,
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
# write.csv(bayes_indices, "../data/bayes_indices.csv")
}
generate_data <- function(sample_size, noise, correlation=1){
data <- data.frame(x = scale(rnorm(sample_size, 0, 1)))
if(correlation==1){
data$y <- scale(data$x)
data$y <- data$y + rnorm(sample_size, mean = 0, sd = noise)
} else{
data$y <- scale(rnorm(sample_size, 0, 1))
}
return(data)
}
bayes_indices <- data.frame()
for(noise in c(0.1, seq(0.5, 5, by=0.5))){
print(noise)
for(correlation in c(0, 1)){
for(sample_size in c(10, 25, 40)){
for(i in 1:1){
cat(".")
df <- generate_data(sample_size, noise, correlation)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
bayes_indices <- rbind(bayes_indices,
data.frame(effect=correlation,
noise=noise,
sample_size=sample_size,
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
# write.csv(bayes_indices, "../data/bayes_indices.csv")
}
df %>%
select(noise, beta, effect, median, mean, map) %>%
gather(estimate, value, -noise) %>%
mutate(noise = as.factor(noise),
value = value) %>%
ggplot(aes(x = noise, y = value, fill = estimate)) +
geom_boxplot() +
geom_hline(yintercept = 1) +
theme_classic() +
scale_fill_manual(values = c("beta" = "grey", "map" = "red", "mean" = "green", "median" = "blue")) +
facet_wrap(~effect)
df %>%
select(noise, beta, effect, median, mean, map) %>%
gather(estimate, value, -noise, -effect) %>%
mutate(noise = as.factor(noise),
value = value) %>%
ggplot(aes(x = noise, y = value, fill = estimate)) +
geom_boxplot() +
geom_hline(yintercept = 1) +
theme_classic() +
scale_fill_manual(values = c("beta" = "grey", "map" = "red", "mean" = "green", "median" = "blue")) +
facet_wrap(~effect)
df <- bayes_indices
df %>%
select(noise, beta, effect, median, mean, map) %>%
gather(estimate, value, -noise, -effect) %>%
mutate(noise = as.factor(noise),
value = value) %>%
ggplot(aes(x = noise, y = value, fill = estimate)) +
geom_boxplot() +
geom_hline(yintercept = 1) +
theme_classic() +
scale_fill_manual(values = c("beta" = "grey", "map" = "red", "mean" = "green", "median" = "blue")) +
facet_wrap(~effect)
df %>%
select(noise, beta, effect, median, mean, map) %>%
gather(estimate, value, -noise, -effect) %>%
mutate(noise = as.factor(noise),
value = value-effect) %>%
ggplot(aes(x = noise, y = value, fill = estimate)) +
geom_boxplot() +
geom_hline(yintercept = 1) +
theme_classic() +
scale_fill_manual(values = c("beta" = "grey", "map" = "red", "mean" = "green", "median" = "blue"))
df %>%
select(noise, beta, effect, median, mean, map) %>%
gather(estimate, value, -noise, -effect) %>%
mutate(noise = as.factor(noise),
value = value-effect) %>%
ggplot(aes(x = noise, y = value, fill = estimate)) +
geom_boxplot() +
geom_hline(yintercept = 0) +
theme_classic() +
scale_fill_manual(values = c("beta" = "grey", "map" = "red", "mean" = "green", "median" = "blue"))
df %>%
select(noise, beta, median, mean, map) %>%
gather(index, value, -noise, -beta) %>%
ggplot(aes(x = beta, y = value, color = index)) +
geom_point(alpha = 0.05, shape = 16) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("map" = "red", "mean" = "green", "median" = "blue"))
df %>%
select(noise, p_frequentist, p_direction, p_map, p_rope, rope, rope_full) %>%
gather(index, value, -noise, -p_frequentist) %>%
ggplot(aes(x = p_frequentist, y = value, color = index)) +
geom_point(shape=16, alpha=0.05) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("p_map" = "#f44336", "p_direction" = "#2196F3", "rope" = "#4CAF50", "rope_full" = "#FFC107"))
df %>%
select(noise, p_frequentist, p_direction, p_map, p_rope, rope, rope_full) %>%
gather(index, value, -noise, -p_frequentist, -p_rope) %>%
ggplot(aes(x = p_frequentist, y = value, color = index)) +
geom_point(shape=16, alpha=0.05) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("p_map" = "#f44336", "p_direction" = "#2196F3", "rope" = "#4CAF50", "rope_full" = "#FFC107", "p_rope"="#FF5722"))
df %>%
select(noise, p_frequentist, p_direction, p_map, p_rope, rope, rope_full) %>%
gather(index, value, -noise, -p_frequentist) %>%
ggplot(aes(x = p_frequentist, y = value, color = index)) +
geom_point(shape=16, alpha=0.05) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("p_map" = "#f44336", "p_direction" = "#2196F3", "rope" = "#4CAF50", "rope_full" = "#FFC107", "p_rope"="#FF5722"))
df$sig_1 <- factor(ifelse(df$p_frequentist >= .1, "n.s.", "°"), levels=c("n.s.", "°"))
df$sig_05 <- factor(ifelse(df$p_frequentist >= .05, "n.s.", "*"), levels=c("n.s.", "*"))
df$sig_01 <- factor(ifelse(df$p_frequentist >= .01, "n.s.", "**"), levels=c("n.s.", "**"))
df$sig_001 <- factor(ifelse(df$p_frequentist >= .001, "n.s.", "***"), levels=c("n.s.", "***"))
get_data <- function(predictor, outcome, lbound=0, ubound=0.3){
fit <- glm(paste(outcome, "~", predictor), data=df, family = "binomial")
data <- data.frame(x=1:100)
data[predictor] <- seq(lbound, ubound, length.out = 100)
data$index <- predictor
data[outcome] = predict(fit, newdata=data, type="response")
data <- select_(data, "value"=predictor, outcome, "index")
return(data)
}
data <- rbind(
get_data(predictor="p_map", outcome="sig_1", lbound=0, ubound=0.5),
get_data(predictor="p_direction", outcome="sig_1", lbound=90, ubound=100),
get_data(predictor="rope", outcome="sig_1", lbound=0, ubound=0.1),
get_data(predictor="rope_full", outcome="sig_1", lbound=0, ubound=0.1),
get_data(predictor="p_rope", outcome="sig_1", lbound=0, ubound=0.1))
bayes_indices <- data.frame()
for(noise in c(0.1, seq(0.5, 5, by=0.5))){
print(noise)
for(correlation in c(0, 1)){
for(sample_size in c(10, 25, 40)){
for(i in 1:1){
cat(".")
df <- generate_data(sample_size, noise, correlation)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
bayes_indices <- rbind(bayes_indices,
data.frame(effect=correlation,
noise=noise,
sample_size=sample_size,
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
write.csv(bayes_indices, "../data/bayes_indices.csv")
}
setwd("C:/Users/Dom/Dropbox/RECHERCHE/N/bayestestR/vignettes")
bayes_indices <- data.frame()
for(noise in c(0.1, seq(0.5, 5, by=0.5))){
print(noise)
for(correlation in c(0, 1)){
for(sample_size in c(10, 25, 40)){
for(i in 1:1){
cat(".")
df <- generate_data(sample_size, noise, correlation)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
bayes_indices <- rbind(bayes_indices,
data.frame(effect=correlation,
noise=noise,
sample_size=sample_size,
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
write.csv(bayes_indices, "../data/bayes_indices.csv")
}
library(bayestestR)
testthat::expect_equal(p_rope(posterior=rnorm_perfect(1000, mean = 5, sd = 1), bounds = c(-0.1, 0.1)), 0, tolerance = 0.01)
testthat::expect_equal(p_rope(posterior=rnorm_perfect(1000, mean = 1, sd = 1), bounds = c(-0.1, 0.1)), 0.016, tolerance = 0.01)
testthat::expect_equal(p_rope(posterior=rnorm_perfect(1000, mean = -1, sd = 1), bounds = c(-0.1, 0.1)), 0.016, tolerance = 0.01)
testthat::expect_equal(p_rope(posterior=rnorm_perfect(1000, mean = 0, sd = 1), bounds = c(-0.1, 0.1)), 1.126, tolerance = 0.01)
p_rope(posterior=rnorm_perfect(1000, mean = 1, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = 0, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = 0, sd = 0.01), bounds = c(-0.1, 0.1))
library(bayestestR)
library(bayestestR)
setwd("C:/Users/Dom/Dropbox/RECHERCHE/N/bayestestR/vignettes")
library(bayestestR)
library(rstanarm)
library(broom)
# options(mc.cores = parallel::detectCores())
set.seed(333)
generate_data <- function(sample_size, noise, correlation=1){
data <- data.frame(x = scale(rnorm(sample_size, 0, 1)))
if(correlation==1){
data$y <- scale(data$x)
data$y <- data$y + rnorm(sample_size, mean = 0, sd = noise)
} else{
data$y <- scale(rnorm(sample_size, 0, 1))
}
return(data)
}
# df <- read.csv("https://raw.github.com/DominiqueMakowski/bayestestR/master/data/bayes_indices.csv")
# df <- read.csv("../data/bayes_indices.csv")
df <- data.frame() # Uncomment this if you want to reset the data
for(noise in c(0.1, seq(2.5, 5, by=2.5))){
for(sample_size in c(20, 40, 60)){
print(paste0(noise, "-", sample_size)
for(effect in c(0, 1)){
for(prior in c(0, 1)){
for(i in 1:1000){
cat(".")
data <- generate_data(sample_size, noise, effect)
freq_model <- lm(y ~ x, data=data)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x,
data=data,
chains=2,
prior=normal(location=prior)))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
df <- rbind(df,
data.frame(effect=effect,
noise=noise,
sample_size=sample_size,
prior=prior,
prior_correct=abs(1-abs(effect-prior)),
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
}
write.csv(df, "../data/bayes_indices.csv", row.names = FALSE)
}
library(bayestestR)
library(rstanarm)
library(broom)
# options(mc.cores = parallel::detectCores())
set.seed(333)
generate_data <- function(sample_size, noise, correlation=1){
data <- data.frame(x = scale(rnorm(sample_size, 0, 1)))
if(correlation==1){
data$y <- scale(data$x)
data$y <- data$y + rnorm(sample_size, mean = 0, sd = noise)
} else{
data$y <- scale(rnorm(sample_size, 0, 1))
}
return(data)
}
# df <- read.csv("https://raw.github.com/DominiqueMakowski/bayestestR/master/data/bayes_indices.csv")
# df <- read.csv("../data/bayes_indices.csv")
df <- data.frame() # Uncomment this if you want to reset the data
for(noise in c(0.1, seq(2.5, 5, by=2.5))){
for(sample_size in c(20, 40, 60)){
print(paste0(noise, "-", sample_size))
for(effect in c(0, 1)){
for(prior in c(0, 1)){
for(i in 1:1000){
cat(".")
data <- generate_data(sample_size, noise, effect)
freq_model <- lm(y ~ x, data=data)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p_frequentist <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x,
data=data,
chains=2,
prior=normal(location=prior)))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
p_direction <- p_direction(posterior)
rope <- rope(posterior, bounds = c(-0.1, 0.1))
rope_full <- rope(posterior, bounds = c(-0.1, 0.1), CI=100)
p_rope <- p_rope(posterior, bounds = c(-0.1, 0.1))
p_map <- p_map(posterior)
df <- rbind(df,
data.frame(effect=effect,
noise=noise,
sample_size=sample_size,
prior=prior,
prior_correct=abs(1-abs(effect-prior)),
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p_frequentist = p_frequentist,
p_direction = p_direction,
rope = rope,
rope_full = rope_full,
p_rope=p_rope,
p_map = p_map))
}
}
}
}
write.csv(df, "../data/bayes_indices.csv", row.names = FALSE)
}
setwd("C:/Users/Dom/Dropbox/RECHERCHE/N/bayestestR/vignettes")
