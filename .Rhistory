rope_overlap <- rope_overlap(posterior, rope = c(-0.1, 0.1))
bayes_p <- bayes_p(posterior)
bayes_indices <- rbind(bayes_indices,
data.frame(noise=noise,
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p = p,
pd = pd,
rope = rope,
rope_overlap = rope_overlap,
bayes_p = bayes_p))
}
}
write.csv(bayes_indices, "../data/bayes_indices.csv")
write.csv(bayes_indices, "./data/bayes_indices.csv")
library(bayestestR)
bayes_indices <- read.csv("https://raw.github.com/DominiqueMakowski/bayestestR/tree/master/data/bayes_indices.csv")
bayes_indices <- read.csv("https://raw.github.com/DominiqueMakowski/bayestestR/master/data/bayes_indices.csv")
styler::style_pkg()
styler::style_file()
styler::style_file("overview.Rmd")
bayes_indices %>%
select(noise, beta, median, mean, map) %>%
gather(index, value, -noise, -beta) %>%
ggplot(aes(x = beta, y = value, color = index)) +
geom_point() +
geom_smooth(method = "loess") +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("map" = "red", "mean" = "green", "median" = "blue"))
bayes_indices %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
mutate(noise = as.factor(noise),
value = value-1) %>%
ggplot(aes(x = noise, y = value, fill = estimate)) +
geom_boxplot() +
geom_hline(yintercept=0) +
theme_classic() +
scale_fill_manual(values=c("beta" = "grey", "map" = "red", "mean" = "green", "median" = "blue"))
t.test(beta, data=bayes_indices)
t.test(data=bayes_indices$beta)
t.test(bayes_indices$beta)
t.test(bayes_indices$beta, mu=1)
t.test(bayes_indices$beta, mu=1)
t.test(bayes_indices$map, mu=1)
t.test(bayes_indices$mean, mu=1)
t.test(bayes_indices$median, mu=1)
t.test(bayes_indices$map, mu=1)
t.test(bayes_indices$beta, mu=1)
t.test(bayes_indices$map, mu=1)
t.test(bayes_indices$beta, mu=1)
t.test(bayes_indices$map, mu=1)
t.test(bayes_indices$mean, mu=1)
t.test(bayes_indices$median, mu=1)
t.test(bayes_indices$beta, mu=1)
t.test(bayes_indices$map, mu=1)
t.test(bayes_indices$mean, mu=1)
t.test(bayes_indices$median, mu=1)
setwd("C:/Users/Dom/Dropbox/RECHERCHE/N/bayestestR/vignettes")
write.csv(bayes_indices, "./data/bayes_indices.csv")
write.csv(bayes_indices, "../data/bayes_indices.csv")
set.seed(333)
data <- data.frame(x = scale(rnorm(50, 0, 1)))
data$y <- scale(data$x)
bayes_indices <- data.frame()
for(noise in c(0.1, seq(0.5, 5, by=0.5))){
print(noise)
for(i in 1:1000){
cat(".")
df <- data
df$y <- df$y + rnorm(50, mean = 0, sd = noise)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)[1]
pd <- pd(posterior)
rope <- rope(posterior, rope = c(-0.1, 0.1))
rope_overlap <- rope_overlap(posterior, rope = c(-0.1, 0.1))
bayes_p <- bayes_p(posterior)
bayes_indices <- rbind(bayes_indices,
data.frame(noise=noise,
iteration=i,
beta = beta,
median = median,
mean = mean,
map = map,
p = p,
pd = pd,
rope = rope,
rope_overlap = rope_overlap,
bayes_p = bayes_p))
}
}
write.csv(bayes_indices, "../data/bayes_indices.csv")
golden <- function(x = 1) {
return(x * (1 + sqrt(5)) / 2)
}
write.csv(bayes_indices, "../data/bayes_indices.csv")
bayes_indices %>%
select(noise, beta, median, mean, map) %>%
gather(estimate, value, -noise) %>%
mutate(noise = as.factor(noise),
value = value-1) %>%
ggplot(aes(x = noise, y = value, fill = estimate)) +
geom_boxplot() +
geom_hline(yintercept = 0) +
theme_classic() +
scale_fill_manual(values = c("beta" = "grey", "map" = "red", "mean" = "green", "median" = "blue"))
t.test(bayes_indices$beta, mu = 1)
t.test(bayes_indices$map, mu = 1)
t.test(bayes_indices$mean, mu = 1)
t.test(bayes_indices$median, mu = 1)
t.test(bayes_indices$beta, mu = 1)
t.test(bayes_indices$map, mu = 1)
t.test(bayes_indices$mean, mu = 1)
t.test(bayes_indices$median, mu = 1)
t.test(bayes_indices$beta, mu = 1)
t.test(bayes_indices$map, mu = 1)
t.test(bayes_indices$mean, mu = 1)
t.test(bayes_indices$median, mu = 1)
t.test(bayes_indices$beta, mu = 1)
t.test(bayes_indices$map, mu = 1)
t.test(bayes_indices$mean, mu = 1)
t.test(bayes_indices$median, mu = 1)
bayes_indices %>%
select(noise, beta, median, mean, map) %>%
gather(index, value, -noise, -beta) %>%
ggplot(aes(x = beta, y = value, color = index)) +
geom_point() +
geom_smooth(method = "loess") +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("map" = "red", "mean" = "green", "median" = "blue"))
bayes_indices %>%
select(noise, beta, median, mean, map) %>%
gather(index, value, -noise, -beta) %>%
ggplot(aes(x = beta, y = value, color = index)) +
geom_point(size=0.1, alpha=1/100, shape=21) +
geom_smooth(method = "loess") +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("map" = "red", "mean" = "green", "median" = "blue"))
bayes_indices %>%
select(noise, beta, median, mean, map) %>%
gather(index, value, -noise, -beta) %>%
ggplot(aes(x = beta, y = value, color = index)) +
geom_point(alpha = 0.1, shape = 21) +
geom_smooth(method = "loess") +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("map" = "red", "mean" = "green", "median" = "blue"))
bayes_indices %>%
select(noise, beta, median, mean, map) %>%
gather(index, value, -noise, -beta) %>%
ggplot(aes(x = beta, y = value, color = index)) +
geom_point(alpha = 0.1, shape = 16) +
geom_smooth(method = "loess") +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("map" = "red", "mean" = "green", "median" = "blue"))
bayes_indices %>%
select(noise, p, pd, bayes_p, rope, rope_overlap) %>%
gather(index, value, -noise, -p) %>%
ggplot(aes(x = p, y = value, color = index)) +
geom_point() +
geom_smooth(method = "loess") +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("bayes_p" = "#f44336", "pd" = "#2196F3", "rope" = "#4CAF50", "rope_overlap" = "#FFC107"))
bayes_indices %>%
select(noise, p, pd, bayes_p, rope, rope_overlap) %>%
gather(index, value, -noise, -p) %>%
ggplot(aes(x = p, y = value, color = index)) +
geom_point(shape=16, alpha=0.1) +
geom_smooth(method = "loess") +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("bayes_p" = "#f44336", "pd" = "#2196F3", "rope" = "#4CAF50", "rope_overlap" = "#FFC107"))
bayes_indices$sig_05 <- ifelse(bayes_indices$p < .05, "*", "n.s.")
bayes_indices %>%
ggplot(aes(x = rope, y = rope_overlap)) +
geom_point() +
geom_smooth(method = "loess") +
theme_classic()
bayes_indices %>%
ggplot(aes(x = rope, y = rope_overlap)) +
geom_point(shape=16, alpha=0.2) +
theme_classic()
bayes_indices %>%
ggplot(aes(x = rope, y = rope_overlap, color=p)) +
geom_point(shape=16, alpha=0.2) +
theme_classic()
fit <- glm(sig_05 ~ bayes_p, data=bayes_indices)
bayes_indices$sig_05 <- ifelse(bayes_indices$p < .05, "*", "n.s.")
fit <- glm(sig_05 ~ bayes_p, data=bayes_indices, family = "logistic")
fit <- glm(sig_05 ~ bayes_p, data=bayes_indices, family = "family")
bayes_indices$sig_05
df <- bayes_indices
summary(df$sig_05)
df$sig_05 <- as.factor(ifelse(df$p < .05, "*", "n.s."))
summary(df$sig_05)
fit <- glm(sig_05 ~ bayes_p, data=df, family = "family")
fit <- glm(sig_05 ~ bayes_p, data=df, family = "binomial")
predict(fit, newdata=data.frame(bayes_p = seq(0, 0.1, length.out = 100)))
data.frame(bayes_p = seq(0, 0.1, length.out = 100))
data.frame(bayes_p = seq(0, 0.1, length.out = 100)) %>%
mutate(sig_05 <- predict(fit, newdata=.))
data.frame(bayes_p = seq(0, 0.1, length.out = 100)) %>%
mutate(sig_05 <- predict(fit, newdata=., type="response"))
data.frame(bayes_p = seq(0, 0.1, length.out = 100)) %>%
mutate(sig_05 <- predict(fit, newdata=., type="response")) %>%
ggplot(aes(x=bayes_p, y=sig_05)) +
geom_line()
data.frame(bayes_p = seq(0, 0.1, length.out = 100)) %>%
mutate(sig_05 = predict(fit, newdata=., type="response")) %>%
ggplot(aes(x=bayes_p, y=sig_05)) +
geom_line()
data.frame(bayes_p = seq(0, 0.2, length.out = 100)) %>%
mutate(sig_05 = predict(fit, newdata=., type="response")) %>%
ggplot(aes(x=bayes_p, y=sig_05)) +
geom_line()
data.frame(bayes_p = seq(0, 0.3, length.out = 100)) %>%
mutate(sig_05 = predict(fit, newdata=., type="response")) %>%
ggplot(aes(x=bayes_p, y=sig_05)) +
geom_line()
df$sig_05 <- as.factor(ifelse(df$p < .05, "*", "n.s."), levels = c("*", "n.s."))
df$sig_05 <- factor(ifelse(df$p < .05, "*", "n.s."), levels = c("*", "n.s."))
fit <- glm(sig_05 ~ bayes_p, data=df, family = "binomial")
data.frame(bayes_p = seq(0, 0.3, length.out = 100)) %>%
mutate(sig_05 = predict(fit, newdata=., type="response")) %>%
ggplot(aes(x=bayes_p, y=sig_05)) +
geom_line()
df$sig_05 <- factor(ifelse(df$p > .05, "n.s.", "*"))
fit <- glm(sig_05 ~ bayes_p, data=df, family = "binomial")
data.frame(bayes_p = seq(0, 0.3, length.out = 100)) %>%
mutate(sig_05 = predict(fit, newdata=., type="response")) %>%
ggplot(aes(x=bayes_p, y=sig_05)) +
geom_line()
df$sig_05 <- factor(ifelse(df$p > .05, "n.s.", "*"), levels=c("n.s.", "*"))
summary(df$sig_05)
fit <- glm(sig_05 ~ bayes_p, data=df, family = "binomial")
data.frame(bayes_p = seq(0, 0.3, length.out = 100)) %>%
mutate(sig_05 = predict(fit, newdata=., type="response")) %>%
ggplot(aes(x=bayes_p, y=sig_05)) +
geom_line()
df$sig_05 <- factor(ifelse(df$p > .05, "n.s.", "*"), levels=c("n.s.", "*"))
df$sig_01 <- factor(ifelse(df$p > .01, "n.s.", "**"), levels=c("n.s.", "**"))
df$sig_001 <- factor(ifelse(df$p > .001, "n.s.", "***"), levels=c("n.s.", "***"))
data.frame(bayes_p = seq(0, 0.3, length.out = 100)) %>%
mutate(sig_05 = predict(fit, newdata=., type="response")) %>%
ggplot(aes(x=bayes_p, y=sig_05)) +
geom_line()
data <- data.frame()
predictor <- "bayes_p"
lbound=0
ubound=0.3
seq(lbound, ubound, length.out = 100))
data[predictor] <- seq(lbound, ubound, length.out = 100)
data <- data.frame(x=1:100)
data[predictor] <- seq(lbound, ubound, length.out = 100)
data[outcome] = predict(fit, newdata=data, type="response")
get_data <- function(predictor, outcome, lbound=0, ubound=0.3){
fit <- glm(paste(outcome, "~", predictor), data=df, family = "binomial")
data <- data.frame(x=1:100)
data[predictor] <- seq(lbound, ubound, length.out = 100)
data[outcome] = predict(fit, newdata=data, type="response")
return(data)
}
get_data(predictor="bayes_p", outcome="sig_05", lbound=0, ubound=0.3)
get_data <- function(predictor, outcome, lbound=0, ubound=0.3){
fit <- glm(paste(outcome, "~", predictor), data=df, family = "binomial")
data <- data.frame(x=1:100)
data[predictor] <- seq(lbound, ubound, length.out = 100)
data$index <- predictor
data[outcome] = predict(fit, newdata=data, type="response")
return(data)
}
data <- get_data(predictor="bayes_p", outcome="sig_05", lbound=0, ubound=0.3)
data <- rbind(
get_data(predictor="bayes_p", outcome="sig_05", lbound=0, ubound=0.3),
get_data(predictor="pd", outcome="sig_05", lbound=80, ubound=100),
get_data(predictor="rope", outcome="sig_05", lbound=0, ubound=1),
get_data(predictor="rope_overlap", outcome="sig_05", lbound=0, ubound=1))
get_data <- function(predictor, outcome, lbound=0, ubound=0.3){
fit <- glm(paste(outcome, "~", predictor), data=df, family = "binomial")
data <- data.frame(x=1:100)
data$value <- seq(lbound, ubound, length.out = 100)
data$index <- predictor
data[outcome] = predict(fit, newdata=data, type="response")
return(data)
}
data <- rbind(
get_data(predictor="bayes_p", outcome="sig_05", lbound=0, ubound=0.3),
get_data(predictor="pd", outcome="sig_05", lbound=80, ubound=100),
get_data(predictor="rope", outcome="sig_05", lbound=0, ubound=1),
get_data(predictor="rope_overlap", outcome="sig_05", lbound=0, ubound=1))
data %>%
ggplot(aes(x=value, y=sig_05)) +
geom_line() +
facet_wrap(~index)
summary(data)
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_05)) +
geom_line() +
facet_wrap(~index)
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_05)) +
geom_line() +
facet_wrap(~index, scales = "free")
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_05)) +
geom_point() +
facet_wrap(~index, scales = "free")
get_data(predictor="bayes_p", outcome="sig_05", lbound=0, ubound=0.3)
select_(data, "value"=predictor, outcome, "index")
get_data <- function(predictor, outcome, lbound=0, ubound=0.3){
fit <- glm(paste(outcome, "~", predictor), data=df, family = "binomial")
data <- data.frame(x=1:100)
data[predictor] <- seq(lbound, ubound, length.out = 100)
data$index <- predictor
data[outcome] = predict(fit, newdata=data, type="response")
data <- select_(data, "value"=predictor, outcome, "index")
return(data)
}
data <- rbind(
get_data(predictor="bayes_p", outcome="sig_05", lbound=0, ubound=0.3),
get_data(predictor="pd", outcome="sig_05", lbound=80, ubound=100),
get_data(predictor="rope", outcome="sig_05", lbound=0, ubound=1),
get_data(predictor="rope_overlap", outcome="sig_05", lbound=0, ubound=1))
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_05)) +
geom_line() +
facet_wrap(~index, scales = "free")
data <- rbind(
get_data(predictor="bayes_p", outcome="sig_05", lbound=0, ubound=0.3),
get_data(predictor="pd", outcome="sig_05", lbound=90, ubound=100),
get_data(predictor="rope", outcome="sig_05", lbound=0, ubound=0.1),
get_data(predictor="rope_overlap", outcome="sig_05", lbound=0, ubound=0.1))
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_05)) +
geom_line() +
facet_wrap(~index, scales = "free")
data <- rbind(
get_data(predictor="bayes_p", outcome="sig_05", lbound=0, ubound=0.3),
get_data(predictor="pd", outcome="sig_05", lbound=90, ubound=100),
get_data(predictor="rope", outcome="sig_05", lbound=0, ubound=0.05),
get_data(predictor="rope_overlap", outcome="sig_05", lbound=0, ubound=0.05))
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_05)) +
geom_line() +
facet_wrap(~index, scales = "free")
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_05)) +
geom_line() +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("bayes_p" = "#f44336", "pd" = "#2196F3", "rope" = "#4CAF50", "rope_overlap" = "#FFC107"))
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_05, color=index)) +
geom_line() +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("bayes_p" = "#f44336", "pd" = "#2196F3", "rope" = "#4CAF50", "rope_overlap" = "#FFC107"))
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_05, color=index)) +
geom_line(size=1) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("bayes_p" = "#f44336", "pd" = "#2196F3", "rope" = "#4CAF50", "rope_overlap" = "#FFC107"))
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_05, color=index)) +
geom_line(size=1) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("bayes_p" = "#f44336", "pd" = "#2196F3", "rope" = "#4CAF50", "rope_overlap" = "#FFC107")) +
ylab("Probability of being significant at p < .05")
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_05, color=index)) +
geom_line(size=1) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("bayes_p" = "#f44336", "pd" = "#2196F3", "rope" = "#4CAF50", "rope_overlap" = "#FFC107")) +
ylab("Probability of being significant at p < .05\○n")
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_05, color=index)) +
geom_line(size=1) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("bayes_p" = "#f44336", "pd" = "#2196F3", "rope" = "#4CAF50", "rope_overlap" = "#FFC107")) +
ylab("Probability of being significant at p < .05\n")
data <- rbind(
get_data(predictor="bayes_p", outcome="sig_01", lbound=0, ubound=0.3),
get_data(predictor="pd", outcome="sig_01", lbound=95, ubound=100),
get_data(predictor="rope", outcome="sig_01", lbound=0, ubound=0.05),
get_data(predictor="rope_overlap", outcome="sig_01", lbound=0, ubound=0.05))
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_01, color=index)) +
geom_line(size=1) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("bayes_p" = "#f44336", "pd" = "#2196F3", "rope" = "#4CAF50", "rope_overlap" = "#FFC107")) +
ylab("Probability of being significant at p < .01\n")
data <- rbind(
get_data(predictor="bayes_p", outcome="sig_01", lbound=0, ubound=0.1),
get_data(predictor="pd", outcome="sig_01", lbound=98, ubound=100),
get_data(predictor="rope", outcome="sig_01", lbound=0, ubound=0.01),
get_data(predictor="rope_overlap", outcome="sig_01", lbound=0, ubound=0.02))
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_01, color=index)) +
geom_line(size=1) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("bayes_p" = "#f44336", "pd" = "#2196F3", "rope" = "#4CAF50", "rope_overlap" = "#FFC107")) +
ylab("Probability of being significant at p < .01\n")
data <- rbind(
get_data(predictor="bayes_p", outcome="sig_001", lbound=0, ubound=0.1),
get_data(predictor="pd", outcome="sig_001", lbound=98, ubound=100),
get_data(predictor="rope", outcome="sig_001", lbound=0, ubound=0.01),
get_data(predictor="rope_overlap", outcome="sig_001", lbound=0, ubound=0.02))
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_001, color=index)) +
geom_line(size=1) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("bayes_p" = "#f44336", "pd" = "#2196F3", "rope" = "#4CAF50", "rope_overlap" = "#FFC107")) +
ylab("Probability of being significant at p < .001\n")
data <- rbind(
get_data(predictor="bayes_p", outcome="sig_001", lbound=0, ubound=0.025),
get_data(predictor="pd", outcome="sig_001", lbound=99.5, ubound=100),
get_data(predictor="rope", outcome="sig_001", lbound=0, ubound=0.01),
get_data(predictor="rope_overlap", outcome="sig_001", lbound=0, ubound=0.01))
data %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig_001, color=index)) +
geom_line(size=1) +
facet_wrap(~index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("bayes_p" = "#f44336", "pd" = "#2196F3", "rope" = "#4CAF50", "rope_overlap" = "#FFC107")) +
ylab("Probability of being significant at p < .001\n")
library(bayestestR)
testthat::expect_warning(hdi(rnorm_perfect(1000), prob = 0.00001))
testthat::expect_warning(hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 1, 1)), prob = 0.00001))
hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 1, 1)))
hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 2, 1)))
hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1)))
hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1), prob=0.1))
hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1), prob=0.99))
hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 3, 1), rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1), prob=0.99))
hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 3, 1), rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1), prob=0.1))
hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 3, 1), rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1), prob=0.01))
hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 3, 1), rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1), prob=0.5))
hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 3, 1), rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1), prob=0.99))
plot(density(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 3, 1), rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1),))
plot(density(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 3, 1), rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1)))
plot(density(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 3, 1), rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1))))
plot(density(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 3, 1), rnorm_perfect(1000, 6, 1))))
plot(density(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1), rnorm_perfect(1000, 12, 1))))
hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1), rnorm_perfect(1000, 12, 1)), prob=0.99)
hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1), rnorm_perfect(1000, 12, 1)), prob=0.5)
hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1), rnorm_perfect(1000, 12, 1)), prob=0.2)
hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1), rnorm_perfect(1000, 12, 1)), prob=0.1)
testthat::expect_warning(hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1), rnorm_perfect(1000, 12, 1)), prob=0.1))
styler::style_pkg()
setwd("C:/Users/Dom/Dropbox/RECHERCHE/N/bayestestR/vignettes")
knit_with_parameters('C:/Users/Dom/Dropbox/RECHERCHE/N/bayestestR/vignettes/overview.Rmd', encoding = 'UTF-8')
golden(5)
5*1.68
8*1.68
7*1.68
setwd("C:/Users/Dom/Dropbox/RECHERCHE/N/bayestestR/vignettes")
6*1.68
