proportions <- .rope(posterior, rope, CI)
.rope <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
HDI_area <- hdi(posterior, CI / 100)
HDI_area <- posterior[dplyr::between(
posterior,
HDI_area[1],
HDI_area[2]
)]
area_within <- HDI_area[dplyr::between(HDI_area, min(rope), max(rope))]
area_outside <- HDI_area[!dplyr::between(HDI_area, min(rope), max(rope))]
proportion_within <- length(area_within) / length(posterior)
proportion_outside <- length(area_outside) / length(posterior)
return(c(proportion_within, proportion_outside))
}
rope_test <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
proportions <- .rope(posterior, rope, CI)
decision <- ifelse(proportions[1] == 0, "accepted",
ifelse(proportions[2] == 0, "rejected", "undecided"))
return(decision)
}
posterior <- rnorm(1000, 1, 1)
results <- rope_test(posterior)
results
rope_test(posterior = rnorm(1000, 0, 0.05), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 1, 0.05), rope = c(-0.1, 0.1))
rope <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
# Return the proportion within the ROPE
return(.rope(posterior, rope, CI)[1])
}
rope(posterior = rnorm(1000, 0, 0.05), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 0.05), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 0, 0.05), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
.rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
# Return the proportion within the ROPE
return(.rope(posterior, rope, CI)[1])
}
rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 0.05), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 1, 0.05), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
#'
#' @references \href{https://strengejacke.wordpress.com/2018/06/06/r-functions-for-bayesian-model-statistics-and-summaries-rstats-stan-brms/}{sjstats}
#'
#'
#' @examples
#' library(bayestestR)
#'
#' rope_test(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
#' rope_test(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
#' rope_test(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
1#'
rope_test(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
rope <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
# Return the proportion within the ROPE
return(.rope(posterior, rope, CI)[1])
}
rope(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
rope_test <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
proportions <- .rope(posterior, rope, CI)
decision <- ifelse(proportions[1] == 0, "rejected",
ifelse(proportions[2] == 0, "accepted", "undecided"))
return(decision)
}
rope_test(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
psycho::HDI(posterior)
psycho::rope(posterior)
.rope(posterior)
rope(posterior)
rope_test(posterior)
HDI_area <- hdi(posterior, CI / 100)
HDI_area <- posterior[dplyr::between(
posterior,
HDI_area[1],
HDI_area[2]
)]
area_within <- HDI_area[dplyr::between(HDI_area, min(rope), max(rope))]
rope = c(-0.1, 0.1)
CI = 95
HDI_area <- hdi(posterior, CI / 100)
HDI_area <- posterior[dplyr::between(
posterior,
HDI_area[1],
HDI_area[2]
)]
HDI_area
area_within <- HDI_area[dplyr::between(HDI_area, min(rope), max(rope))]
area_within
proportion_within <- length(area_within) / length(HDI_area)
proportion_within
library(bayestestR)
hdi(rnorm_perfect(1000), prob = 0.9)
length(hdi(rnorm_perfect(1000), prob = c(0.8, 0.9, 0.95)))
testthat::expect_equal(length(hdi(rnorm_perfect(1000), prob = c(0.8, 0.9, 0.95))), 3, tolerance = 0.01)
testthat::expect_equal(hdi(rnorm_perfect(1000), prob = 0.9)[1], 1.63, tolerance = 0.02)
testthat::expect_equal(hdi(rnorm_perfect(5000), prob = 0.9)[1], 1.63, tolerance = 0.02)
testthat::expect_equal(hdi(rnorm_perfect(5000), prob = 0.9)[1], 1.64, tolerance = 0.02)
(hdi(rnorm_perfect(5000), prob = 0.9)[1]
hdi(rnorm_perfect(5000), prob = 0.9)[1]
hdi(rnorm_perfect(5000), prob = 0.9)[1]
hdi(rnorm_perfect(5000), prob = 0.9)[1]
hdi(rnorm_perfect(5000), prob = 0.9)[1]
hdi(rnorm_perfect(5000), prob = 0.9)[1]
testthat::expect_equal(hdi(rnorm_perfect(1000), prob = 0.9)[1], -1.64, tolerance = 0.02)
rope(rnorm_perfect(1000))
testthat::expect_equal(rope(rnorm_perfect(1000)), 0.08, tolerance = 0.02)
rope_decision(rnorm_perfect(1000, 0, 1))
rope_test(rnorm_perfect(1000, 0, 1))
testthat::expect_equal(rope_test(rnorm_perfect(1000, 0, 1)), "undecided")
rope(rnorm_perfect(1000, 2, 0.01))
testthat::expect_equal(rope(rnorm_perfect(1000, 2, 0.01)), 0, tolerance = 0.01)
rope_test(rnorm_perfect(1000, 2, 0.01))
rope(rnorm_perfect(1000, 0, 0.001))
testthat::expect_equal(rope_test(rnorm_perfect(1000, 0, 0.001)), "accepted")
source('C:/Users/Dom/Dropbox/RECHERCHE/N/bayestestR/tests/testthat/test-rope.R')
hdp <- function(x, precision = 1e+03) {
d <- x %>%
density(n = precision) %>%
as.data.frame()
y <- d$x[which.max(d$y)]
return(y)
}
posterior <- rnorm(1000)
hdp(posterior)
library(dplyr)
posterior <- rnorm(1000)
hdp(posterior)
x <- sosterior
x <- posterior
precision = 1e+03
d <- density(x, n = precision)
d <- data.frame(x = d$x, y = d$y)
y <- d$x[which.max(d$y)]
y
x <- d$x[which.max(d$y)]
y <- d$y[x]
c(x, y)
c(x, y)
hdp <- function(x, precision = 1e+03) {
d <- density(x, n = precision)
d <- data.frame(x = d$x, y = d$y)
x <- d$x[which.max(d$y)]
y <- d$y[x]
return(c(x, y))
}
hdp(posterior)
hdp <- function(x, precision = 1e+03) {
d <- density(x, n = precision)
d <- data.frame(x = d$x, y = d$y)
x <- d$x[which.max(d$y)]
y <- d$y[x]
return(c(x, y))
}
hdp(posterior)
d <- density(x, n = precision)
d <- data.frame(x = d$x, y = d$y)
x <- posterior
d <- density(x, n = precision)
d <- data.frame(x = d$x, y = d$y)
hdp_x <- d$x[which.max(d$y)]
hdp_y <- d$y[hdp_x]
d$y
hdp_x
which.max(d$y)
hdp_x <- d$x[which.max(d$y)]
hdp_y <- d$y[which.max(d$y)]
hdp <- function(x, precision = 1e+03) {
d <- density(x, n = precision)
d <- data.frame(x = d$x, y = d$y)
hdp_x <- d$x[which.max(d$y)]
hdp_y <- d$y[which.max(d$y)]
return(c(hdp_x, hdp_y))
}
library(tidyverse)
ggplot(d, aes(x=x, y=y)) +
geom_line()
ggplot(d, aes(x=x, y=y)) +
geom_line() +
geom_point(x=hdp_x, y=hdp_y)
testthat::expect_equal(hdp(rnorm_perfect(1000))[1], 0, tolerance = 0.02)
library(bayestestR)
testthat::expect_equal(hdp(rnorm_perfect(1000))[1], 0, tolerance = 0.02)
hdp(rnorm_perfect(1000))[1]
pd(posterior)
# Density at 0
d <- density(posterior, n = precision)
d <- data.frame(x = d$x, y = d$y)
d <- density(x, n = precision)
d$x
d$x[which.max(d$y)]
hdp <- function(x, precision = 512) {
d <- density(x, n = precision)
hdp_x <- d$x[which.max(d$y)]
hdp_y <- d$y[which.max(d$y)]
return(c(hdp_x, hdp_y))
}
posterior <- rnorm(1000)
hdp(posterior)
hdp <- function(x, precision = 512) {
d <- density(x, n = precision)
hdp_x <- d$x[which.max(d$y)]
hdp_y <- max(d$y)
return(c(hdp_x, hdp_y))
}
hdp(posterior)
# Density at 0
closest_value_to_0 <- which.min(abs(posterior))
closest_value_to_0
closest_value_to_0 <- which.min(abs(d$x))
closest_value_to_0
plot(d)
d$x
precision = 512
# Density at 0
d <- density(posterior, n = precision)
closest_value_to_0 <- which.min(abs(d$x))
closest_value_to_0
d$y[closest_value_to_0]
d_0 <- d$y[closest_value_to_0]
posterior <- rnorm(1000, 1, 1)
hdp <- hdp(posterior)[2]
# Density at 0
d <- density(posterior, n = precision)
closest_value_to_0 <- which.min(abs(d$x))
d_0 <- d$y[closest_value_to_0]
pd(posterior)
# Odds
odds <- hdp / d_0
odds
mode(posterior)
#'
#' #' @examples
#' library(bayestestR)
#'
#' posterior <- rnorm(1000, 1, 1)
#' odds_h0(posterior)
#'
#' @author \href{https://dominiquemakowski.github.io/}{Dominique Makowski}
#' @importFrom stats density
#' @export
odds_h0 <- function(posterior, precision = 512) {
if(pd(posterior) < 100){
# Highest density point
hdp <- hdp(posterior)[2]
# Density at 0
d <- density(posterior, n = precision)
closest_value_to_0 <- which.min(abs(d$x))
d_0 <- d$y[closest_value_to_0]
# Odds
return(hdp / d_0)
} else{
return(Inf)
}
}
odds_h0 <- function(posterior, precision = 512) {
if(pd(posterior) < 100){
# Highest density point
hdp <- hdp(posterior)[2]
# Density at 0
d <- density(posterior, n = precision)
closest_value_to_0 <- which.min(abs(d$x))
d_0 <- d$y[closest_value_to_0]
# Odds
return(hdp / d_0)
} else{
return(Inf)
}
}
posterior <- rnorm(1000, 1, 1)
odds_h0(posterior)
source('C:/Users/Dom/Dropbox/RECHERCHE/N/bayestestR/R/hdp.R')
library(bayestestR)
map_estimate(rnorm_perfect(1000))[1]
map_estimate <- function(posterior, precision = 512) {
d <- density(posterior, n = precision)
hdp_x <- d$x[which.max(d$y)]
hdp_y <- max(d$y)
return(c(hdp_x, hdp_y))
}
map_estimate(rnorm_perfect(1000))[1]
testthat::expect_equal(map_estimate(rnorm_perfect(1000))[1], 0, tolerance = 0.01)
odds_h0(rnorm_perfect(1000))[1]
odds_h0(rnorm_perfect(1000))
library(bayestestR)
odds_h0(rnorm_perfect(1000, 3, 0.01))
testthat::expect_equal(odds_h0(rnorm_perfect(1000, 3, 0.01)), Inf, tolerance = 0.01)
odds_h0(rnorm_perfect(1000, 1, 1))
odds_h0(rnorm_perfect(1000, 0.01))
posterior <- rnorm_perfect(1000)
pd(posterior)
map <- map_estimate(posterior)[2]
map
d <- density(posterior, n = precision)
closest_value_to_0 <- which.min(abs(d$x))
d_0 <- d$y[closest_value_to_0]
precision = 512
d <- density(posterior, n = precision)
closest_value_to_0 <- which.min(abs(d$x))
d_0 <- d$y[closest_value_to_0]
d_0
map / d_0
testthat::expect_equal(odds_h0(rnorm_perfect(1000)), 1, tolerance = 0.01)
testthat::expect_equal(odds_h0(rnorm_perfect(1000)), 1, tolerance = 0.01)
testthat::expect_equal(odds_h0(rnorm_perfect(1000, 1, 1)), 1.60, tolerance = 0.01)
testthat::expect_equal(odds_h0(rnorm_perfect(1000, 3, 0.01)), Inf, tolerance = 0.01)
odds_h0(rnorm_perfect(1000, 2, 1))
n^3
2^3
2^10
posterior = rnorm(1000, 0, 0.01)
rope = c(-0.1, 0.1)
CI = 95
HDI_area <- hdi(posterior, CI / 100)
posterior[dplyr::between(
posterior,
HDI_area[1],
HDI_area[2]
)]
HDI_area2 <- posterior[dplyr::between(
posterior,
HDI_area[1],
HDI_area[2]
)]
HDI_area <- posterior[posterior >= HDI_area[1] & posterior <= HDI_area[1]]
HDI_area <- hdi(posterior, CI / 100)
HDI_area <- posterior[posterior >= HDI_area[1] & posterior <= HDI_area[2]]
area_within2 <- HDI_area[dplyr::between(HDI_area, min(rope), max(rope))]
area_within <- HDI_area[HDI_area >= min(rope) & HDI_area <=  max(rope)]
hdi(rnorm_perfect(3), prob = 0.9)
hdi(c(2, 3, NA))
testthat::expect_warning(hdi(c(2, 3, NA)), -1.64, tolerance = 0.02)
testthat::expect_warning(hdi(c(2, 3, NA)))
testthat::expect_warning(hdi(c(2, 3)))
hdi(rnorm_perfect(1000), prob=0.00001)
testthat::expect_warning(hdi(rnorm_perfect(1000), prob=0.00001))
styler::style_pkg()
x <- rnorm(1000, 0, 1)
y <- 0.2*x
cor.test(x, y)
lm(y ~ x)
set.seed(333)
x <- rnorm(100, 0, 1)
y <- rnorm(100, 0, 1)
lm(y ~ x)
summary(lm(y ~ x))
as.data.frame(summary(lm(y ~ x)))
broom::tidy(lm(y ~ x)))
broom::tidy(lm(y ~ x))
broom::tidy(lm(y ~ x))[,2]
broom::tidy(lm(y ~ x))[2, ]
freq_fit <- lm(y ~ x)
freq_model <- lm(y ~ x)
beta <- broom::tidy(freq_model)[2, ]$estimate
broom::tidy(freq_model)[2, ]
p <- broom::tidy(freq_model)[2, ]$p.value
bayes_model <- rstanarm::stan_glm(y ~ x)
df <- data.frame(y = rnorm(100, 0, 1))
df$x <- 0.2*df$y + rnorm(100, mean = 0, sd = 0.01)
freq_model <- lm(y ~ x, data=df)
bayes_model <- rstanarm::stan_glm(y ~ x, data=df)
bayes_model <- capture.output(rstanarm::stan_glm(y ~ x, data=df))
broom::tidy(bayes_model)
as.data.frame(bayes_model)
as.data.frame(bayes_model)
capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
as.data.frame(bayes_model)
posterior <- as.data.frame(bayes_model)$x
df <- data.frame(y = rnorm(100, 0, 1))
df$x <- scale(0.2*df$y + rnorm(100, mean = 0, sd = 0.01))
freq_model <- lm(y ~ x, data=df)
broom::tidy(freq_model)
df <- data.frame(y = rnorm(100, 0, 1))
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
df <- data.frame(y = rnorm(100, 0, 1))
df$x <- 0.2*df$y + rnorm(100, mean = 0, sd = 0.01)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
df <- data.frame(y = rnorm(100, 0, 1))
df$x <- 0.2*df$y + rnorm(100, mean = 0, sd = 0.001)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
df <- data.frame(y = rnorm(100, 0, 1))
df$x <- 0.2*df$y
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
y = rnorm(100, 0, 1)
y = rnorm(100, 0, 1)
x <- 0.2*y + rnorm(100, mean = 0, sd = 0.001)
freq_model <- lm(y ~ x)
summary(freq_model)
lm(y ~ x)
x = rnorm(100, 0, 1)
y <- 0.2*x + rnorm(100, mean = 0, sd = 0.001)
freq_model <- lm(y ~ x)
summary(freq_model)
df <- data.frame(x = rnorm(100, 0, 1))
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
df <- data.frame(x = rnorm(100, 0, 1))
df$y <- 0.2*df$x + rnorm(100, mean = 0, sd = 0.001)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
df <- psycho::standardize(df)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
df <- data.frame(x = rnorm(100, 0, 1))
df$y <- scale(0.2*df$x + rnorm(100, mean = 0, sd = 0.001))
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
df <- data.frame(x = scale(rnorm(100, 0, 1)))
df$y <- scale(0.2*df$x + rnorm(100, mean = 0, sd = 0.01))
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
df <- data.frame(x = scale(rnorm(100, 0, 1)))
df$y <- scale(0.2*df$x + rnorm(100, mean = 0, sd = 0.1))
freq_model <- lm(y ~ x, data=df)
beta <- broom::tidy(freq_model)[2, ]$estimate
summary(freq_model)
df <- data.frame(x = scale(rnorm(100, 0, 1)))
df$y <- scale(0.2*df$x + rnorm(100, mean = 0, sd = 0.8))
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
df <- data.frame(x = scale(rnorm(100, 0, 1)))
df$y <- scale(0.2*df$x + rnorm(100, mean = 0, sd = 1))
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
freq_model <- lm(y ~ x, data=df)
df <- data.frame(x = scale(rnorm(100, 0, 1)))
df$y <- scale(0.2*df$x)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
data <- data.frame(x = scale(rnorm(100, 0, 1)))
df <- data
data <- data.frame(x = scale(rnorm(100, 0, 1)))
data$y <- scale(0.2*data$x)
noise <- 0.1
df <- data
df$y <- df$y + rnorm(100, mean = 0, sd = noise))
df$y <- df$y + rnorm(100, mean = 0, sd = noise)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)
data <- data.frame(x = scale(rnorm(100, 0, 1)))
data$y <- scale(0.2*data$x)
parameter <- data.frame()
for(noise in c(0.1, 1)){
df <- data
df$y <- df$y + rnorm(100, mean = 0, sd = noise)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)
parameter <- rbind(parameter,
data.frame(noise=noise,
beta = beta,
median = median,
mean = mean,
map = map))
}
parameter
parameter
summary(parameter)
parameter <- data.frame()
for(noise in c(0.1, 1)){
df <- data
df$y <- df$y + rnorm(100, mean = 0, sd = noise)
freq_model <- lm(y ~ x, data=df)
summary(freq_model)
beta <- broom::tidy(freq_model)[2, ]$estimate
p <- broom::tidy(freq_model)[2, ]$p.value
out <- capture.output(bayes_model <- rstanarm::stan_glm(y ~ x, data=df))
posterior <- as.data.frame(bayes_model)$x
median <- median(posterior)
mean <- mean(posterior)
map <- map_estimate(posterior)
parameter <- rbind(parameter,
data.frame(noise=noise,
beta = beta,
median = median,
mean = mean,
map = map))
}
data.frame(noise=noise,
beta = beta,
median = median,
mean = mean,
map = map)
