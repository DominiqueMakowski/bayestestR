rbind(
get_data(predictor="p_map", outcome="sig_05", lbound=0, ubound=0.3),
get_data(predictor="p_direction", outcome="sig_05", lbound=95, ubound=100),
get_data(predictor="rope", outcome="sig_05", lbound=0, ubound=10),
get_data(predictor="rope_full", outcome="sig_05", lbound=0, ubound=10),
get_data(predictor="p_rope", outcome="sig_05", lbound=70, ubound=100)
) %>%
rename("sig"=sig_05) %>%
mutate(threshold="p < .05"),
rbind(
get_data(predictor="p_map", outcome="sig_01", lbound=0, ubound=0.1),
get_data(predictor="p_direction", outcome="sig_01", lbound=98, ubound=100),
get_data(predictor="rope", outcome="sig_01", lbound=0, ubound=2),
get_data(predictor="rope_full", outcome="sig_01", lbound=0, ubound=2),
get_data(predictor="p_rope", outcome="sig_01", lbound=90, ubound=100)
) %>%
rename("sig"=sig_01) %>%
mutate(threshold="p < .01"),
rbind(
get_data(predictor="p_map", outcome="sig_001", lbound=0, ubound=0.02),
get_data(predictor="p_direction", outcome="sig_001", lbound=99.5, ubound=100),
get_data(predictor="rope", outcome="sig_001", lbound=0, ubound=0.5),
get_data(predictor="rope_full", outcome="sig_001", lbound=0, ubound=0.5),
get_data(predictor="p_rope", outcome="sig_001", lbound=95, ubound=100)
) %>%
rename("sig"=sig_001) %>%
mutate(threshold="p < .001")
) %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig)) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper), alpha=0.1) +
geom_line(aes(color=index), size=1) +
facet_grid(scales = "free", rows="threshold", cols="index") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("p_frequentist"="#607D8B", "p_map" = "#E91E63", "p_direction" = "#2196F3",
"rope" = "#FF9800", "rope_full" = "#FF5722", "p_rope"="#FFC107"), guide=FALSE) +
ylab("Probability of being significant\n") +
xlab("\nIndex Value")
facet_grid(threshold ~ index, scales = "free" +
theme_classic() +
rbind(
rbind(
get_data(predictor="p_map", outcome="sig_1", lbound=0, ubound=0.5),
get_data(predictor="p_direction", outcome="sig_1", lbound=90, ubound=100),
get_data(predictor="rope", outcome="sig_1", lbound=0, ubound=20),
get_data(predictor="rope_full", outcome="sig_1", lbound=0, ubound=20),
get_data(predictor="p_rope", outcome="sig_1", lbound=0, ubound=100)
) %>%
rename("sig"=sig_1) %>%
mutate(threshold="p < .1"),
rbind(
get_data(predictor="p_map", outcome="sig_05", lbound=0, ubound=0.3),
get_data(predictor="p_direction", outcome="sig_05", lbound=95, ubound=100),
get_data(predictor="rope", outcome="sig_05", lbound=0, ubound=10),
get_data(predictor="rope_full", outcome="sig_05", lbound=0, ubound=10),
get_data(predictor="p_rope", outcome="sig_05", lbound=70, ubound=100)
) %>%
rename("sig"=sig_05) %>%
mutate(threshold="p < .05"),
rbind(
get_data(predictor="p_map", outcome="sig_01", lbound=0, ubound=0.1),
get_data(predictor="p_direction", outcome="sig_01", lbound=98, ubound=100),
get_data(predictor="rope", outcome="sig_01", lbound=0, ubound=2),
get_data(predictor="rope_full", outcome="sig_01", lbound=0, ubound=2),
get_data(predictor="p_rope", outcome="sig_01", lbound=90, ubound=100)
) %>%
rename("sig"=sig_01) %>%
mutate(threshold="p < .01"),
rbind(
get_data(predictor="p_map", outcome="sig_001", lbound=0, ubound=0.02),
get_data(predictor="p_direction", outcome="sig_001", lbound=99.5, ubound=100),
get_data(predictor="rope", outcome="sig_001", lbound=0, ubound=0.5),
get_data(predictor="rope_full", outcome="sig_001", lbound=0, ubound=0.5),
get_data(predictor="p_rope", outcome="sig_001", lbound=95, ubound=100)
) %>%
rename("sig"=sig_001) %>%
mutate(threshold="p < .001")
) %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig)) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper), alpha=0.1) +
geom_line(aes(color=index), size=1) +
facet_grid(threshold ~ index, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("p_frequentist"="#607D8B", "p_map" = "#E91E63", "p_direction" = "#2196F3",
"rope" = "#FF9800", "rope_full" = "#FF5722", "p_rope"="#FFC107"), guide=FALSE) +
ylab("Probability of being significant\n") +
xlab("\nIndex Value")
rbind(
rbind(
get_data(predictor="p_map", outcome="sig_1", lbound=0, ubound=0.5),
get_data(predictor="p_direction", outcome="sig_1", lbound=90, ubound=100),
get_data(predictor="rope", outcome="sig_1", lbound=0, ubound=20),
get_data(predictor="rope_full", outcome="sig_1", lbound=0, ubound=20),
get_data(predictor="p_rope", outcome="sig_1", lbound=0, ubound=100)
) %>%
rename("sig"=sig_1) %>%
mutate(threshold="p < .1"),
rbind(
get_data(predictor="p_map", outcome="sig_05", lbound=0, ubound=0.3),
get_data(predictor="p_direction", outcome="sig_05", lbound=95, ubound=100),
get_data(predictor="rope", outcome="sig_05", lbound=0, ubound=10),
get_data(predictor="rope_full", outcome="sig_05", lbound=0, ubound=10),
get_data(predictor="p_rope", outcome="sig_05", lbound=70, ubound=100)
) %>%
rename("sig"=sig_05) %>%
mutate(threshold="p < .05"),
rbind(
get_data(predictor="p_map", outcome="sig_01", lbound=0, ubound=0.1),
get_data(predictor="p_direction", outcome="sig_01", lbound=98, ubound=100),
get_data(predictor="rope", outcome="sig_01", lbound=0, ubound=2),
get_data(predictor="rope_full", outcome="sig_01", lbound=0, ubound=2),
get_data(predictor="p_rope", outcome="sig_01", lbound=90, ubound=100)
) %>%
rename("sig"=sig_01) %>%
mutate(threshold="p < .01"),
rbind(
get_data(predictor="p_map", outcome="sig_001", lbound=0, ubound=0.02),
get_data(predictor="p_direction", outcome="sig_001", lbound=99.5, ubound=100),
get_data(predictor="rope", outcome="sig_001", lbound=0, ubound=0.5),
get_data(predictor="rope_full", outcome="sig_001", lbound=0, ubound=0.5),
get_data(predictor="p_rope", outcome="sig_001", lbound=95, ubound=100)
) %>%
rename("sig"=sig_001) %>%
mutate(threshold="p < .001")
) %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig)) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper), alpha=0.1) +
geom_line(aes(color=index), size=1) +
facet_grid(index ~ threshold, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("p_frequentist"="#607D8B", "p_map" = "#E91E63", "p_direction" = "#2196F3",
"rope" = "#FF9800", "rope_full" = "#FF5722", "p_rope"="#FFC107"), guide=FALSE) +
ylab("Probability of being significant\n") +
xlab("\nIndex Value")
rbind(
rbind(
get_data(predictor="p_map", outcome="sig_1", lbound=0, ubound=0.5),
get_data(predictor="p_direction", outcome="sig_1", lbound=90, ubound=100),
get_data(predictor="rope", outcome="sig_1", lbound=0, ubound=20),
get_data(predictor="rope_full", outcome="sig_1", lbound=0, ubound=20),
get_data(predictor="p_rope", outcome="sig_1", lbound=0, ubound=100)
) %>%
rename("sig"=sig_1) %>%
mutate(threshold="p < .1"),
rbind(
get_data(predictor="p_map", outcome="sig_05", lbound=0, ubound=0.3),
get_data(predictor="p_direction", outcome="sig_05", lbound=95, ubound=100),
get_data(predictor="rope", outcome="sig_05", lbound=0, ubound=10),
get_data(predictor="rope_full", outcome="sig_05", lbound=0, ubound=10),
get_data(predictor="p_rope", outcome="sig_05", lbound=70, ubound=100)
) %>%
rename("sig"=sig_05) %>%
mutate(threshold="p < .05"),
rbind(
get_data(predictor="p_map", outcome="sig_01", lbound=0, ubound=0.1),
get_data(predictor="p_direction", outcome="sig_01", lbound=98, ubound=100),
get_data(predictor="rope", outcome="sig_01", lbound=0, ubound=2),
get_data(predictor="rope_full", outcome="sig_01", lbound=0, ubound=2),
get_data(predictor="p_rope", outcome="sig_01", lbound=90, ubound=100)
) %>%
rename("sig"=sig_01) %>%
mutate(threshold="p < .01"),
rbind(
get_data(predictor="p_map", outcome="sig_001", lbound=0, ubound=0.02),
get_data(predictor="p_direction", outcome="sig_001", lbound=99.5, ubound=100),
get_data(predictor="rope", outcome="sig_001", lbound=0, ubound=0.5),
get_data(predictor="rope_full", outcome="sig_001", lbound=0, ubound=0.5),
get_data(predictor="p_rope", outcome="sig_001", lbound=95, ubound=100)
) %>%
rename("sig"=sig_001) %>%
mutate(threshold="p < .001")
) %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig)) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper), alpha=0.1) +
geom_line(aes(color=index), size=1) +
facet_wrap(index ~ threshold, scales = "free") +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("p_frequentist"="#607D8B", "p_map" = "#E91E63", "p_direction" = "#2196F3",
"rope" = "#FF9800", "rope_full" = "#FF5722", "p_rope"="#FFC107"), guide=FALSE) +
ylab("Probability of being significant\n") +
xlab("\nIndex Value")
rbind(
rbind(
get_data(predictor="p_map", outcome="sig_1", lbound=0, ubound=0.5),
get_data(predictor="p_direction", outcome="sig_1", lbound=90, ubound=100),
get_data(predictor="rope", outcome="sig_1", lbound=0, ubound=20),
get_data(predictor="rope_full", outcome="sig_1", lbound=0, ubound=20),
get_data(predictor="p_rope", outcome="sig_1", lbound=0, ubound=100)
) %>%
rename("sig"=sig_1) %>%
mutate(threshold="p < .1"),
rbind(
get_data(predictor="p_map", outcome="sig_05", lbound=0, ubound=0.3),
get_data(predictor="p_direction", outcome="sig_05", lbound=95, ubound=100),
get_data(predictor="rope", outcome="sig_05", lbound=0, ubound=10),
get_data(predictor="rope_full", outcome="sig_05", lbound=0, ubound=10),
get_data(predictor="p_rope", outcome="sig_05", lbound=70, ubound=100)
) %>%
rename("sig"=sig_05) %>%
mutate(threshold="p < .05"),
rbind(
get_data(predictor="p_map", outcome="sig_01", lbound=0, ubound=0.1),
get_data(predictor="p_direction", outcome="sig_01", lbound=98, ubound=100),
get_data(predictor="rope", outcome="sig_01", lbound=0, ubound=2),
get_data(predictor="rope_full", outcome="sig_01", lbound=0, ubound=2),
get_data(predictor="p_rope", outcome="sig_01", lbound=90, ubound=100)
) %>%
rename("sig"=sig_01) %>%
mutate(threshold="p < .01"),
rbind(
get_data(predictor="p_map", outcome="sig_001", lbound=0, ubound=0.02),
get_data(predictor="p_direction", outcome="sig_001", lbound=99.5, ubound=100),
get_data(predictor="rope", outcome="sig_001", lbound=0, ubound=0.5),
get_data(predictor="rope_full", outcome="sig_001", lbound=0, ubound=0.5),
get_data(predictor="p_rope", outcome="sig_001", lbound=95, ubound=100)
) %>%
rename("sig"=sig_001) %>%
mutate(threshold="p < .001")
) %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig)) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper), alpha=0.1) +
geom_line(aes(color=index), size=1) +
facet_wrap(~ index * threshold, scales = "free", rows=5) +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("p_frequentist"="#607D8B", "p_map" = "#E91E63", "p_direction" = "#2196F3",
"rope" = "#FF9800", "rope_full" = "#FF5722", "p_rope"="#FFC107"), guide=FALSE) +
ylab("Probability of being significant\n") +
xlab("\nIndex Value")
rbind(
rbind(
get_data(predictor="p_map", outcome="sig_1", lbound=0, ubound=0.5),
get_data(predictor="p_direction", outcome="sig_1", lbound=90, ubound=100),
get_data(predictor="rope", outcome="sig_1", lbound=0, ubound=20),
get_data(predictor="rope_full", outcome="sig_1", lbound=0, ubound=20),
get_data(predictor="p_rope", outcome="sig_1", lbound=0, ubound=100)
) %>%
rename("sig"=sig_1) %>%
mutate(threshold="p < .1"),
rbind(
get_data(predictor="p_map", outcome="sig_05", lbound=0, ubound=0.3),
get_data(predictor="p_direction", outcome="sig_05", lbound=95, ubound=100),
get_data(predictor="rope", outcome="sig_05", lbound=0, ubound=10),
get_data(predictor="rope_full", outcome="sig_05", lbound=0, ubound=10),
get_data(predictor="p_rope", outcome="sig_05", lbound=70, ubound=100)
) %>%
rename("sig"=sig_05) %>%
mutate(threshold="p < .05"),
rbind(
get_data(predictor="p_map", outcome="sig_01", lbound=0, ubound=0.1),
get_data(predictor="p_direction", outcome="sig_01", lbound=98, ubound=100),
get_data(predictor="rope", outcome="sig_01", lbound=0, ubound=2),
get_data(predictor="rope_full", outcome="sig_01", lbound=0, ubound=2),
get_data(predictor="p_rope", outcome="sig_01", lbound=90, ubound=100)
) %>%
rename("sig"=sig_01) %>%
mutate(threshold="p < .01"),
rbind(
get_data(predictor="p_map", outcome="sig_001", lbound=0, ubound=0.02),
get_data(predictor="p_direction", outcome="sig_001", lbound=99.5, ubound=100),
get_data(predictor="rope", outcome="sig_001", lbound=0, ubound=0.5),
get_data(predictor="rope_full", outcome="sig_001", lbound=0, ubound=0.5),
get_data(predictor="p_rope", outcome="sig_001", lbound=95, ubound=100)
) %>%
rename("sig"=sig_001) %>%
mutate(threshold="p < .001")
) %>%
mutate(index = as.factor(index)) %>%
ggplot(aes(x=value, y=sig)) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper), alpha=0.1) +
geom_line(aes(color=index), size=1) +
facet_wrap(~ index * threshold, scales = "free", nrow=5) +
theme_classic() +
theme(strip.background = element_blank()) +
scale_color_manual(values = c("p_frequentist"="#607D8B", "p_map" = "#E91E63", "p_direction" = "#2196F3",
"rope" = "#FF9800", "rope_full" = "#FF5722", "p_rope"="#FFC107"), guide=FALSE) +
ylab("Probability of being significant\n") +
xlab("\nIndex Value")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(bayestestR)
citation("bayestestR")
library(bayestestR)
library(bayestestR)
citation("bayestestR")
pkgdown::build_site()
install.packages("goodpractice")
goodpractice::gp()
spelling::spell_check_package()
spelling::spell_check_package()
library(bayestestR)
spelling::spell_check_package()
goodpractice::gp()
as.data.frame(density(rnorm_perfect(1000)))
testthat::expect_is(as.data.frame(density(rnorm_perfect(1000))),data.frame)
as.data.frame(density(rnorm_perfect(1000)))
class(as.data.frame(density(rnorm_perfect(1000))))
testthat::expect_is(as.data.frame(density(rnorm_perfect(1000))), "data.frame")
goodpractice::gp()
posterior <- rnorm(1000, mean = 1, sd = 1)
p_direction <- 100 * max(
c(
length(posterior[posterior > 0]) / length(posterior), # pd positive
length(posterior[posterior < 0]) / length(posterior) # pd negative
)
)
p_direction
posterior <- rnorm(1000, mean = 1, sd = 1)
p_direction <- 100 * max(
c(
length(posterior[posterior > 0]) / length(posterior), # pd positive
length(posterior[posterior < 0]) / length(posterior) # pd negative
)
)
p_direction
p_direction*1000
max(
c(
length(posterior[posterior > 0]) / length(posterior), # pd positive
length(posterior[posterior < 0]) / length(posterior) # pd negative
)
)
class(p_direction)
class(p_direction) <- append(class(me),"p_direction")
class(p_direction) <- append(class(p_direction),"p_direction")
p_direction
p_direction+100
p_direction <- 100 * max(
c(
length(posterior[posterior > 0]) / length(posterior), # pd positive
length(posterior[posterior < 0]) / length(posterior) # pd negative
)
)
class(p_direction) <- c("p_direction", class(p_direction))
p_direction
library(bayestestR)
print()
p_direction <- bayestestR::p_direction(bayestestR::rnorm_perfect(100, 1, 1))
p_direction
testthat::expect_equal(p_direction, 84, tolerance = 0.2)
p_direction
posterior <- rnorm(1000, mean = 1, sd = 1)
p_direction(posterior)
posterior <- rnorm(1000, mean = 1, sd = 1)
p_direction(posterior)
p_direction <- 100 * max(
c(
length(posterior[posterior > 0]) / length(posterior), # pd positive
length(posterior[posterior < 0]) / length(posterior) # pd negative
)
)
class(p_direction) <- c("p_direction", class(p_direction))
class(p_direction)
library(bayestestR)
posterior <- rnorm(1000, mean = 1, sd = 1)
p_direction(posterior)
library(bayestestR)
posterior <- rnorm(1000, mean = 1, sd = 1)
p_direction(posterior)
library(bayestestR)
posterior <- rnorm(1000, mean = 1, sd = 1)
p_direction(posterior)
library(bayestestR)
posterior <- rnorm(1000, mean = 1, sd = 1)
p_direction(posterior)
library(bayestestR)
posterior <- rnorm(1000, mean = 1, sd = 1)
p_direction(posterior)
library(bayestestR)
posterior <- rnorm(1000, mean = 1, sd = 1)
p_direction(posterior)
library(bayestestR)
library(bayestestR)
p_direction(posterior)
as.numeric(p_direction(posterior))
a <- p_direction(posterior)
p_direction <- bayestestR::p_direction(bayestestR::rnorm_perfect(100, 1, 1))
p_direction <- bayestestR::p_direction(bayestestR::rnorm_perfect(1000, 1, 1))
as.numeric(p_direction)
testthat::expect_equal(as.numeric(p_direction), 84.2, tolerance = 0.1)
library(bayestestR)
bayestestR::p_direction(bayestestR::rnorm_perfect(1000, 1, 1))
library(bayestestR)
rope(posterior = rnorm(1000, 0, 0.01), bounds = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), bounds = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 0.01), bounds = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 1), CI = c(90, 95))
library(bayestestR)
library(bayestestR)
pkgdown::build_site()
setwd("C:/Users/Dom/Dropbox/RECHERCHE/N/easystats/bayestestR")
pkgdown::build_site()
pkgdown::build_site()
testthat::expect_is(p_direction, "p_direction")
print(p_direction)
testthat::expect_equal(print(p_direction), "pd = 84.20%")
testthat::expect_equal(print(p_direction), 84.20)
print(p_direction)
class(print(p_direction))
as.character(print(p_direction))
capture.output(print(p_direction))
p_direction <- bayestestR::p_direction(bayestestR::rnorm_perfect(10000, 1, 1))
testthat::expect_equal(as.numeric(p_direction), 84.2, tolerance = 0.1)
testthat::expect_is(p_direction, "p_direction")
testthat::expect_equal(capture.output(print(p_direction)), "pd = 84.20%")
capture.output(print(p_direction))
set.seed(333)
p_direction <- bayestestR::p_direction(bayestestR::rnorm_perfect(10000, 1, 1))
testthat::expect_equal(as.numeric(p_direction), 84.2, tolerance = 0.1)
testthat::expect_is(p_direction, "p_direction")
testthat::expect_equal(capture.output(print(p_direction)), "pd = 84.14%")
testthat::expect_is(rope(rnorm_perfect(1000, 0, 1)), "rope")
capture.output(print(rope(rnorm_perfect(1000, 0, 1))))
set.seed(333)
testthat::expect_is(rope(rnorm_perfect(1000, 0, 1)), "rope")
testthat::expect_equal(capture.output(print(rope(rnorm_perfect(1000, 0, 1)))), "8.88% in ROPE")
library(bayestestR)
pkgdown::build_site()
fit <- stan_glm(mpg10 ~ wt + cyl + am, data = mtcars, QR = TRUE, algorithm = "sampling")
model <- rstanarm::stan_glm(mpg10 ~ wt + cyl + am, data = mtcars, QR = TRUE, algorithm = "sampling")
mtcars
model <- rstanarm::stan_glm(mpg ~ wt + cyl + am, data = mtcars, QR = TRUE, algorithm = "sampling")
library(bayestestR)
map_estimate(model)
library(bayestestR)
map_estimate(model)
posterior <- model
posteriors <- as.data.frame(posterior)
precision = 2^10
sapply(posteriors, map_estimate, precision=precision)
t(sapply(posteriors, map_estimate, precision=precision))
sapply(posteriors, map_estimate, precision=precision, simplify = FALSE)
model <- brms::brm(mpg ~ wt + cyl + am, data = mtcars)
model <- rstanarm::stan_glm(mpg ~ wt + cyl + am, data = mtcars)
model <- brms::brm(mpg ~ wt + cyl + am, data = mtcars)
model <- brms::brm(mpg ~ wt + cyl + am, data = mtcars)
library(brms)
model <- brms::brm(mpg ~ wt + cyl, data = mtcars)
posterior <- model
sapply(as.data.frame(posterior), map_estimate, precision=precision, simplify = FALSE)
library(bayestestR)
sapply(as.data.frame(posterior), map_estimate, precision=precision, simplify = FALSE)
precision = 2^10
sapply(as.data.frame(posterior), map_estimate, precision=precision, simplify = FALSE)
library(bayestestR)
model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars)
hdi(model)
library(bayestestR)
equivalence_test(posterior = rnorm(1000, 1, 1), CI = c(50, 99))
model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars)
equivalence_tes(model)
equivalence_test(model)
library(bayestestR)
library(rstanarm)
model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars)
p_direction(model)
library(bayestestR)
p_map(model)
model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars)
p_map(model)
p_map(posterior = rnorm(1000, 10, 1))
library(bayestestR)
p_map(model)
p_map(posterior = rnorm(1000, c(0, 1), 1))
rnorm(1000, c(0, 1), 1)
library(bayestestR)
model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars)
p_rope(model)
p_rope(model)
library(bayestestR)
p_rope(model)
library(bayestestR)
equivalence_test(posterior = rnorm(1000, 0, 0.01), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 0, 0.01), bounds = c(-0.1, 0.1))
set.seed(333)
library(rstanarm)
model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars)
testthat::expect_is(rope(model), "list")
rope(model)
testthat::expect_is(rope(model), "list")
library(bayestestR)
testthat::expect_is(hdi(model), "list")
testthat::expect_is(rope(model), "list")
testthat::expect_is(equivalence_test(model), "list")
testthat::expect_is(map_estimate(model), "list")
testthat::expect_is(p_map(model), "list")
testthat::expect_is(p_rope(model), "list")
testthat::expect_is(p_direction(model), "list")
set.seed(333)
library(brms)
model <- brms::brm(mpg ~ wt + cyl, data = mtcars)
testthat::expect_is(hdi(model), "list")
testthat::expect_is(rope(model), "list")
testthat::expect_is(equivalence_test(model), "list")
testthat::expect_is(map_estimate(model), "list")
testthat::expect_is(p_map(model), "list")
testthat::expect_is(p_rope(model), "list")
testthat::expect_is(p_direction(model), "list")
report::show_packages()
report::show_packages(sessionInfo())
