window_size <- floor(prob * length(x_sorted))
if (window_size < 2) {
if (verbose) {
warning("HDI: `prob` is too small or x does not contain enough data points, returning NaNs.")
}
return(c(NA, NA))
}
lower <- seq_len(N - window_size)
upper <- window_size + lower
# vectorized difference between edges of cumulative distribution based on scan_length. Values are arranged from left to right scanning.
window_width_diff <- x_sorted[upper] - x_sorted[lower]
# find minimum of width differences, check for multiple minima
min_i <- which(window_width_diff == min(window_width_diff))
n_candies <- length(min_i)
if (n_candies > 1) {
if (any(diff(sort(min_i)) != 1)) {
if (verbose) {
warning("HDI: Identical densities found along different segments of the distribution, choosing rightmost.")
}
min_i <- max(min_i)
} else {
min_i <- floor(mean(min_i))
}
}
# get values based on minimum
c(x_sorted[min_i], x_sorted[upper[min_i]])
}
.hdi(x)
psycho::HDI(x)
hdi <- function(x, prob = 0.90, verbose = TRUE) {
if (anyNA(x)) {
if (verbose) {
warning("HDI: the posterior contains NaNs, returning NaNs.")
}
return(c(NA, NA))
}
N <- length(x)
if (N < 3) {
if (verbose) {
warning("HDI: the posterior is too short, returning NaNs.")
}
return(c(NA, NA))
}
x_sorted <- sort(x)
window_size <- floor(prob * length(x_sorted))
if (window_size < 2) {
if (verbose) {
warning("HDI: `prob` is too small or x does not contain enough data points, returning NaNs.")
}
return(c(NA, NA))
}
lower <- seq_len(N - window_size)
upper <- window_size + lower
# vectorized difference between edges of cumulative distribution based on scan_length. Values are arranged from left to right scanning.
window_width_diff <- x_sorted[upper] - x_sorted[lower]
# find minimum of width differences, check for multiple minima
min_i <- which(window_width_diff == min(window_width_diff))
n_candies <- length(min_i)
if (n_candies > 1) {
if (any(diff(sort(min_i)) != 1)) {
if (verbose) {
warning("HDI: Identical densities found along different segments of the distribution, choosing rightmost.")
}
min_i <- max(min_i)
} else {
min_i <- floor(mean(min_i))
}
}
# get values based on minimum
c(x_sorted[min_i], x_sorted[upper[min_i]])
}
hdi(x, prob=c(0.8, 0.9))
hdi_values <- c()
for(prob_value in c(prob)) {
hdi_values <- c(hdi_values, .hdi(x, prob = prob_value, verbose = verbose))
}
hdi_values
hdi <- function(x, prob = 0.90, verbose = TRUE) {
hdi_values <- c()
for(prob_value in c(prob)) {
hdi_values <- c(hdi_values, .hdi(x, prob = prob_value, verbose = verbose))
}
}
hdi <- function(posterior, prob = 0.90, verbose = TRUE) {
hdi_values <- c()
for(prob_value in c(prob)) {
hdi_values <- c(hdi_values, .hdi(posterior, prob = prob_value, verbose = verbose))
}
}
hdi(posterior, prob = c(0.8, 0.9, 0.95))
hdi <- function(posterior, prob = 0.90, verbose = TRUE) {
hdi_values <- c()
for(prob_value in c(prob)) {
hdi_values <- c(hdi_values, .hdi(posterior, prob = prob_value, verbose = verbose))
}
return(hdi_values)
}
hdi(posterior, prob = 0.9)
hdi(posterior, prob = c(0.8, 0.9, 0.95))
prob = 0.90
length(prob)
hdi <- function(posterior, prob = 0.90, verbose = TRUE) {
if(length(prob) > 1){
hdi_values <- list()
for(prob_value in c(prob)) {
hdi_values[[prob_value]] <- .hdi(posterior, prob = prob_value, verbose = verbose)
}
} else{
return(.hdi(posterior, prob = prob, verbose = verbose))
}
}
posterior <- rnorm(1000)
hdi(posterior, prob = 0.9)
hdi(posterior, prob = c(0.8, 0.9, 0.95))
prob = c(0.8, 0.9, 0.95)
length(prob) > 1
hdi_values <- list()
for(prob_value in prob) {
hdi_values[[prob_value]] <- .hdi(posterior, prob = prob_value, verbose = verbose)
}
hdi_values <- list()
for(prob_value in prob) {
hdi_values[prob_value] <- .hdi(posterior, prob = prob_value, verbose = verbose)
}
hdi_values
hdi_values <- list()
hdi_values
prob_value
hdi_values[as.character(prob_value)] <- .hdi(posterior, prob = prob_value, verbose = verbose)
hdi_values[as.character(prob_value)]
hdi <- function(posterior, prob = 0.90, verbose = TRUE) {
if(length(prob) > 1){
hdi_values <- list()
for(prob_value in prob) {
hdi_values[as.character(prob_value)] <- .hdi(posterior, prob = prob_value, verbose = verbose)
}
} else{
return(.hdi(posterior, prob = prob, verbose = verbose))
}
}
posterior <- rnorm(1000)
hdi(posterior, prob = 0.9)
hdi(posterior, prob = c(0.8, 0.9, 0.95))
hdi <- function(posterior, prob = 0.90, verbose = TRUE) {
if(length(prob) > 1){
hdi_values <- list()
for(prob_value in prob) {
hdi_values[[as.character(prob_value)]] <- .hdi(posterior, prob = prob_value, verbose = verbose)
}
return(hdi_values)
} else{
return(.hdi(posterior, prob = prob, verbose = verbose))
}
}
posterior <- rnorm(1000)
hdi(posterior, prob = 0.9)
hdi(posterior, prob = c(0.8, 0.9, 0.95))
styler::style_pkg()
posterior <- rnorm(1000, 1, 1)
rope = c(-0.1, 0.1)
HDI_area <- hdi(posterior, CI / 100)
CI = 95
HDI_area <- hdi(posterior, CI / 100)
hdi <- function(posterior, prob = 0.90, verbose = TRUE) {
if (length(prob) > 1) {
hdi_values <- list()
for (prob_value in prob) {
hdi_values[[as.character(prob_value)]] <- .hdi(posterior, prob = prob_value, verbose = verbose)
}
return(hdi_values)
} else {
return(.hdi(posterior, prob = prob, verbose = verbose))
}
}
HDI_area <- hdi(posterior, CI / 100)
HDI_area
HDI_area <- posterior[dplyr::between(
posterior,
HDI_area$values$HDImin,
HDI_area$values$HDImax
)]
HDI_area
HDI_area <- posterior[dplyr::between(
posterior,
HDI_area[1],
HDI_area[2]
)]
HDI_area
area_within <- HDI_area[dplyr::between(HDI_area, min(rope), max(rope))]
area_outside <- HDI_area[!dplyr::between(HDI_area, min(rope), max(rope))]
p_within <- length(area_within) / length(posterior)
p_outside <- length(area_outside) / length(posterior)
p_within
p_outside
p_outside == 1-p_within
rope_test <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
proportions <- .rope(posterior, rope, CI)
decision <- ifelse(proportions[1] == 0, "accepted",
ifelse(proportions[2] == 0, "rejected", "undecided"))
return(decision)
}
posterior <- rnorm(1000, 1, 1)
results <- rope_test(posterior)
#' @keywords internal
.rope <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
HDI_area <- hdi(posterior, CI / 100)
HDI_area <- posterior[dplyr::between(
posterior,
HDI_area[1],
HDI_area[2]
)]
area_within <- HDI_area[dplyr::between(HDI_area, min(rope), max(rope))]
area_outside <- HDI_area[!dplyr::between(HDI_area, min(rope), max(rope))]
proportion_within <- length(area_within) / length(posterior)
proportion_outside <- length(area_outside) / length(posterior)
return(proportion_within, proportion_outside)
}
rope_test <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
proportions <- .rope(posterior, rope, CI)
decision <- ifelse(proportions[1] == 0, "accepted",
ifelse(proportions[2] == 0, "rejected", "undecided"))
return(decision)
}
posterior <- rnorm(1000, 1, 1)
results <- rope_test(posterior)
rope = c(-0.1, 0.1)
CI = 95
proportions <- .rope(posterior, rope, CI)
.rope <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
HDI_area <- hdi(posterior, CI / 100)
HDI_area <- posterior[dplyr::between(
posterior,
HDI_area[1],
HDI_area[2]
)]
area_within <- HDI_area[dplyr::between(HDI_area, min(rope), max(rope))]
area_outside <- HDI_area[!dplyr::between(HDI_area, min(rope), max(rope))]
proportion_within <- length(area_within) / length(posterior)
proportion_outside <- length(area_outside) / length(posterior)
return(c(proportion_within, proportion_outside))
}
rope_test <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
proportions <- .rope(posterior, rope, CI)
decision <- ifelse(proportions[1] == 0, "accepted",
ifelse(proportions[2] == 0, "rejected", "undecided"))
return(decision)
}
posterior <- rnorm(1000, 1, 1)
results <- rope_test(posterior)
results
rope_test(posterior = rnorm(1000, 0, 0.05), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 1, 0.05), rope = c(-0.1, 0.1))
rope <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
# Return the proportion within the ROPE
return(.rope(posterior, rope, CI)[1])
}
rope(posterior = rnorm(1000, 0, 0.05), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 0.05), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 0, 0.05), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
.rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
# Return the proportion within the ROPE
return(.rope(posterior, rope, CI)[1])
}
rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 0.05), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 1, 0.05), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
#'
#' @references \href{https://strengejacke.wordpress.com/2018/06/06/r-functions-for-bayesian-model-statistics-and-summaries-rstats-stan-brms/}{sjstats}
#'
#'
#' @examples
#' library(bayestestR)
#'
#' rope_test(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
#' rope_test(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
#' rope_test(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
1#'
rope_test(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
rope <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
# Return the proportion within the ROPE
return(.rope(posterior, rope, CI)[1])
}
rope(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
rope_test <- function(posterior, rope = c(-0.1, 0.1), CI = 95) {
proportions <- .rope(posterior, rope, CI)
decision <- ifelse(proportions[1] == 0, "rejected",
ifelse(proportions[2] == 0, "accepted", "undecided"))
return(decision)
}
rope_test(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope_test(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
psycho::HDI(posterior)
psycho::rope(posterior)
.rope(posterior)
rope(posterior)
rope_test(posterior)
HDI_area <- hdi(posterior, CI / 100)
HDI_area <- posterior[dplyr::between(
posterior,
HDI_area[1],
HDI_area[2]
)]
area_within <- HDI_area[dplyr::between(HDI_area, min(rope), max(rope))]
rope = c(-0.1, 0.1)
CI = 95
HDI_area <- hdi(posterior, CI / 100)
HDI_area <- posterior[dplyr::between(
posterior,
HDI_area[1],
HDI_area[2]
)]
HDI_area
area_within <- HDI_area[dplyr::between(HDI_area, min(rope), max(rope))]
area_within
proportion_within <- length(area_within) / length(HDI_area)
proportion_within
library(bayestestR)
hdi(rnorm_perfect(1000), prob = 0.9)
length(hdi(rnorm_perfect(1000), prob = c(0.8, 0.9, 0.95)))
testthat::expect_equal(length(hdi(rnorm_perfect(1000), prob = c(0.8, 0.9, 0.95))), 3, tolerance = 0.01)
testthat::expect_equal(hdi(rnorm_perfect(1000), prob = 0.9)[1], 1.63, tolerance = 0.02)
testthat::expect_equal(hdi(rnorm_perfect(5000), prob = 0.9)[1], 1.63, tolerance = 0.02)
testthat::expect_equal(hdi(rnorm_perfect(5000), prob = 0.9)[1], 1.64, tolerance = 0.02)
(hdi(rnorm_perfect(5000), prob = 0.9)[1]
hdi(rnorm_perfect(5000), prob = 0.9)[1]
hdi(rnorm_perfect(5000), prob = 0.9)[1]
hdi(rnorm_perfect(5000), prob = 0.9)[1]
hdi(rnorm_perfect(5000), prob = 0.9)[1]
hdi(rnorm_perfect(5000), prob = 0.9)[1]
testthat::expect_equal(hdi(rnorm_perfect(1000), prob = 0.9)[1], -1.64, tolerance = 0.02)
rope(rnorm_perfect(1000))
testthat::expect_equal(rope(rnorm_perfect(1000)), 0.08, tolerance = 0.02)
rope_decision(rnorm_perfect(1000, 0, 1))
rope_test(rnorm_perfect(1000, 0, 1))
testthat::expect_equal(rope_test(rnorm_perfect(1000, 0, 1)), "undecided")
rope(rnorm_perfect(1000, 2, 0.01))
testthat::expect_equal(rope(rnorm_perfect(1000, 2, 0.01)), 0, tolerance = 0.01)
rope_test(rnorm_perfect(1000, 2, 0.01))
rope(rnorm_perfect(1000, 0, 0.001))
testthat::expect_equal(rope_test(rnorm_perfect(1000, 0, 0.001)), "accepted")
source('C:/Users/Dom/Dropbox/RECHERCHE/N/bayestestR/tests/testthat/test-rope.R')
hdp <- function(x, precision = 1e+03) {
d <- x %>%
density(n = precision) %>%
as.data.frame()
y <- d$x[which.max(d$y)]
return(y)
}
posterior <- rnorm(1000)
hdp(posterior)
library(dplyr)
posterior <- rnorm(1000)
hdp(posterior)
x <- sosterior
x <- posterior
precision = 1e+03
d <- density(x, n = precision)
d <- data.frame(x = d$x, y = d$y)
y <- d$x[which.max(d$y)]
y
x <- d$x[which.max(d$y)]
y <- d$y[x]
c(x, y)
c(x, y)
hdp <- function(x, precision = 1e+03) {
d <- density(x, n = precision)
d <- data.frame(x = d$x, y = d$y)
x <- d$x[which.max(d$y)]
y <- d$y[x]
return(c(x, y))
}
hdp(posterior)
hdp <- function(x, precision = 1e+03) {
d <- density(x, n = precision)
d <- data.frame(x = d$x, y = d$y)
x <- d$x[which.max(d$y)]
y <- d$y[x]
return(c(x, y))
}
hdp(posterior)
d <- density(x, n = precision)
d <- data.frame(x = d$x, y = d$y)
x <- posterior
d <- density(x, n = precision)
d <- data.frame(x = d$x, y = d$y)
hdp_x <- d$x[which.max(d$y)]
hdp_y <- d$y[hdp_x]
d$y
hdp_x
which.max(d$y)
hdp_x <- d$x[which.max(d$y)]
hdp_y <- d$y[which.max(d$y)]
hdp <- function(x, precision = 1e+03) {
d <- density(x, n = precision)
d <- data.frame(x = d$x, y = d$y)
hdp_x <- d$x[which.max(d$y)]
hdp_y <- d$y[which.max(d$y)]
return(c(hdp_x, hdp_y))
}
library(tidyverse)
ggplot(d, aes(x=x, y=y)) +
geom_line()
ggplot(d, aes(x=x, y=y)) +
geom_line() +
geom_point(x=hdp_x, y=hdp_y)
testthat::expect_equal(hdp(rnorm_perfect(1000))[1], 0, tolerance = 0.02)
library(bayestestR)
testthat::expect_equal(hdp(rnorm_perfect(1000))[1], 0, tolerance = 0.02)
hdp(rnorm_perfect(1000))[1]
pd(posterior)
# Density at 0
d <- density(posterior, n = precision)
d <- data.frame(x = d$x, y = d$y)
d <- density(x, n = precision)
d$x
d$x[which.max(d$y)]
hdp <- function(x, precision = 512) {
d <- density(x, n = precision)
hdp_x <- d$x[which.max(d$y)]
hdp_y <- d$y[which.max(d$y)]
return(c(hdp_x, hdp_y))
}
posterior <- rnorm(1000)
hdp(posterior)
hdp <- function(x, precision = 512) {
d <- density(x, n = precision)
hdp_x <- d$x[which.max(d$y)]
hdp_y <- max(d$y)
return(c(hdp_x, hdp_y))
}
hdp(posterior)
# Density at 0
closest_value_to_0 <- which.min(abs(posterior))
closest_value_to_0
closest_value_to_0 <- which.min(abs(d$x))
closest_value_to_0
plot(d)
d$x
precision = 512
# Density at 0
d <- density(posterior, n = precision)
closest_value_to_0 <- which.min(abs(d$x))
closest_value_to_0
d$y[closest_value_to_0]
d_0 <- d$y[closest_value_to_0]
posterior <- rnorm(1000, 1, 1)
hdp <- hdp(posterior)[2]
# Density at 0
d <- density(posterior, n = precision)
closest_value_to_0 <- which.min(abs(d$x))
d_0 <- d$y[closest_value_to_0]
pd(posterior)
# Odds
odds <- hdp / d_0
odds
mode(posterior)
#'
#' #' @examples
#' library(bayestestR)
#'
#' posterior <- rnorm(1000, 1, 1)
#' odds_h0(posterior)
#'
#' @author \href{https://dominiquemakowski.github.io/}{Dominique Makowski}
#' @importFrom stats density
#' @export
odds_h0 <- function(posterior, precision = 512) {
if(pd(posterior) < 100){
# Highest density point
hdp <- hdp(posterior)[2]
# Density at 0
d <- density(posterior, n = precision)
closest_value_to_0 <- which.min(abs(d$x))
d_0 <- d$y[closest_value_to_0]
# Odds
return(hdp / d_0)
} else{
return(Inf)
}
}
odds_h0 <- function(posterior, precision = 512) {
if(pd(posterior) < 100){
# Highest density point
hdp <- hdp(posterior)[2]
# Density at 0
d <- density(posterior, n = precision)
closest_value_to_0 <- which.min(abs(d$x))
d_0 <- d$y[closest_value_to_0]
# Odds
return(hdp / d_0)
} else{
return(Inf)
}
}
posterior <- rnorm(1000, 1, 1)
odds_h0(posterior)
source('C:/Users/Dom/Dropbox/RECHERCHE/N/bayestestR/R/hdp.R')
