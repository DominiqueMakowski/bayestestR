HDI_area <- hdi(posterior, CI / 100)
HDI_area <- posterior[posterior >= HDI_area[1] & posterior <= HDI_area[2]]
area_within <- HDI_area[HDI_area >= min(rope) & HDI_area <= max(rope)]
return(length(area_within) / length(HDI_area))
}
lapply(.rope(posterior, CI=CI))
mapply(.rope, posterior=posterior, rope=rope, vectorize.args=CI)
mapply(.rope, posterior=posterior, rope=rope, CI=CI)
mapply(.rope, posterior, rope, CI)
mapply(.rope, posterior, rope)
rope <- function(posterior, rope = c(-0.1, 0.1), CI = 90) {
if (length(CI) > 1) {
rope_values <- list()
for (CI_value in CI) {
rope_values[[as.character(prob_value)]] <- .rope(posterior, rope=rope, CI=CI)
}
return(rope_values)
} else {
return(.rope(posterior, rope=rope, CI=CI))
}
}
rope(posterior = rnorm(1000, 1, 0), CI = c(90, 95))
rope <- function(posterior, rope = c(-0.1, 0.1), CI = 90) {
if (length(CI) > 1) {
rope_values <- list()
for (CI_value in CI) {
rope_values[[as.character(prob_value)]] <- .rope(posterior, rope=rope, CI=CI)
}
return(rope_values)
} else {
return(.rope(posterior, rope=rope, CI=CI))
}
}
rope(posterior = rnorm(1000, 1, 0), CI = c(90, 95))
.rope <- function(posterior, rope = c(-0.1, 0.1), CI = 90) {
HDI_area <- hdi(posterior, CI / 100)
HDI_area <- posterior[posterior >= HDI_area[1] & posterior <= HDI_area[2]]
area_within <- HDI_area[HDI_area >= min(rope) & HDI_area <= max(rope)]
return(length(area_within) / length(HDI_area))
}
rope <- function(posterior, rope = c(-0.1, 0.1), CI = 90) {
if (length(CI) > 1) {
rope_values <- list()
for (CI_value in CI) {
rope_values[[as.character(prob_value)]] <- .rope(posterior, rope=rope, CI=CI)
}
return(rope_values)
} else {
return(.rope(posterior, rope=rope, CI=CI))
}
}
rope <- function(posterior, rope = c(-0.1, 0.1), CI = 90) {
if (length(CI) > 1) {
rope_values <- list()
for (CI_value in CI) {
rope_values[[as.character(rope_values)]] <- .rope(posterior, rope=rope, CI=CI)
}
return(rope_values)
} else {
return(.rope(posterior, rope=rope, CI=CI))
}
}
rope(posterior = rnorm(1000, 1, 0), CI = c(90, 95))
CI = c(90, 95)
length(CI)
rope = c(-0.1, 0.1)
rope_values <- list()
for (CI_value in CI) {
rope_values[[as.character(rope_values)]] <- .rope(posterior, rope=rope, CI=CI)
}
rope_values <- list()
CI
rope <- function(posterior, rope = c(-0.1, 0.1), CI = 90) {
if (length(CI) > 1) {
rope_values <- list()
for (CI_value in CI) {
rope_values[[as.character(CI_value)]] <- .rope(posterior, rope=rope, CI=CI)
}
return(rope_values)
} else {
return(.rope(posterior, rope=rope, CI=CI))
}
}
rope(posterior = rnorm(1000, 1, 0), CI = c(90, 95))
rope <- function(posterior, rope = c(-0.1, 0.1), CI = 90) {
if (length(CI) > 1) {
rope_values <- list()
for (CI_value in CI) {
rope_values[[as.character(CI_value)]] <- .rope(posterior, rope=rope, CI=CI_value)
}
return(rope_values)
} else {
return(.rope(posterior, rope=rope, CI=CI))
}
}
rope(posterior = rnorm(1000, 1, 0), CI = c(90, 95))
rope(posterior = rnorm(1000, 0.5, 0), CI = c(90, 95))
rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 1), CI = c(90, 95))
rope <- rope(posterior, rope, CI)
decision <- ifelse(rope == 0, "rejected",
ifelse(rope == 1, "accepted", "undecided")
)
return(decision)
rope <- rope(posterior, rope, CI)
rope = c(-0.1, 0.1)
rope <- rope(posterior, rope, CI)
CI
rope <- function(posterior, rope = c(-0.1, 0.1), CI = 90) {
if (length(CI) > 1) {
rope_values <- list()
for (CI_value in CI) {
rope_values[[as.character(CI_value)]] <- .rope(posterior, rope=rope, CI=CI_value)
}
return(rope_values)
} else {
return(.rope(posterior, rope=rope, CI=CI))
}
}
rope(posterior, rope, CI)
rope <- rope(posterior, rope=rope, CI)
posterior = rnorm(1000, 1, 1)
rope <- rope(posterior, rope=rope, CI=CI)
rope(posterior = rnorm(1000, 1, 1), CI = c(90, 95))
rope(posterior, rope=rope, CI=CI)
rope
library(bayestestR)
rope(posterior = rnorm(1000, 0, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 0.01), rope = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 1), CI = c(90, 95))
posterior
bounds = c(-0.1, 0.1)
CI
rope_value <- rope(posterior, bounds=bounds, CI=CI)
library(bayestestR)
posterior = rnorm(1000, 1, 0.01)
bounds = c(-0.1, 0.1)
CI <- c(90, 95)
rope_value <- rope(posterior, bounds=bounds, CI=CI)
rope_value
posterior = rnorm(1000, 1, 1)
rope_value <- rope(posterior, bounds=bounds, CI=CI)
rope_value
CI = c(50, 00)
CI = c(50, 99)
rope_value <- rope(posterior, bounds=bounds, CI=CI)
rope_value
ifelse(rope_value == 0, "rejected",
ifelse(rope_value == 1, "accepted", "undecided")
ifelse(rope_value == 0, "rejected",
ifelse(rope_value == 1, "accepted", "undecided")
)
decision <- ifelse(rope_value == 0, "rejected",
ifelse(rope_value == 1, "accepted", "undecided")
)
library(bayestestR)
rope(rnorm_perfect(1000, 1, 1), CI=c(50, 99))
testthat::expect_equal(rope(rnorm_perfect(1000, 1, 1), CI=c(50, 99)), c(0, 0.05), tolerance = 0.01)
testthat::expect_equal(rope(rnorm_perfect(1000, 1, 1), CI=c(50, 99))[2], 0.05, tolerance = 0.01)
testthat::expect_equal(rope(rnorm_perfect(1000, 1, 1), CI=c(50, 99))$`99`, 0.05, tolerance = 0.01)
library(bayestestR)
testthat::expect_equal(rope_test(rnorm_perfect(1000, 0, 1)), "undecided")
testthat::expect_equal(rope(rnorm_perfect(1000, 2, 0.01)), 0, tolerance = 0.01)
testthat::expect_equal(rope_test(rnorm_perfect(1000, 2, 0.01)), "rejected")
testthat::expect_equal(rope(rnorm_perfect(1000, 0, 0.001)), 1, tolerance = 0.01)
testthat::expect_equal(rope_test(rnorm_perfect(1000, 0, 0.001)), "accepted")
rope(rnorm_perfect(1000, 1, 1), CI=c(50, 99))$CI_99
testthat::expect_equal(rope(rnorm_perfect(1000, 1, 1), CI=c(50, 99))$CI_99, 0.05, tolerance = 0.01)
testthat::expect_equal(rope_test(rnorm_perfect(1000, 1, 1)), "accepted")
rope_test(rnorm_perfect(1000, 1, 1), CI=c(50, 99))$CI_99
rope_test(rnorm_perfect(1000, 1, 1), CI=c(50, 99))
rope_test(rnorm_perfect(1000, 1, 1), CI=c(50, 99))$CI_99
rope_value <- rope(posterior, bounds=bounds, CI=CI)
rope_value
decision <- ifelse(rope_value == 0, "rejected",
ifelse(rope_value == 1, "accepted", "undecided")
)
split(unname(decision),names(decision))
decision <- split(unname(decision),names(decision))
CI = 90
rope_value <- rope(posterior, bounds=bounds, CI=CI)
decision <- ifelse(rope_value == 0, "rejected",
ifelse(rope_value == 1, "accepted", "undecided")
)
rope_value
library(bayestestR)
posterior <- rnorm_perfect(1000, mean = -1, sd = 1)
bounds = c(-0.1, 0.1)
precision <- 10
rope(posterior, bounds, CI=seq(0, 100, by=precision))
library(bayestestR)
library(bayestestR)
rope(posterior, bounds, CI=seq(0, 100, by=precision, verbose=FALSE))
library(bayestestR)
rope(posterior, bounds, CI=seq(0, 100, by=precision, verbose=FALSE))
rope(posterior, bounds, CI=seq(0, 100, by=precision, verbose=FALSE))
library(bayestestR)
posterior <- rnorm_perfect(1000, mean = -1, sd = 1)
bounds = c(-0.1, 0.1)
precision=0.1
rope(posterior, bounds, CI=seq(0, 100, by=precision, verbose=FALSE))
rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
flatten(rope_values)
unlist(rope_values)
rope_values <- unlist(rope_values)
plot(rope_values)
min1 <- min(rope_values)
min2 <- min(rope_values[rope_values != min1])
min1
min1 <- min(na.omit(rope_values))
min2 <- min(na.omit(rope_values[rope_values != min1]))
min1
min2
min <- min(na.omit(rope_values))
min_rope <- min(na.omit(rope_values))
rope_values[1] == min_rope
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
min_rope <- min(rope_values)
rope_values[1] == min_rope
rope_values[rope_values != min_rope]
name_min2 <- names(rope_values[rope_values != min_rope][1])
name_min2
match("name_min2", names(rope_values))
match(names(rope_values), "name_min2")
match(name_min2, names(rope_values))
CI_position <- match(name_min2, names(rope_values))-1
p_position <- match(name_min2, names(rope_values))-1
names(rope_values[CI_position])
posterior <- rnorm_perfect(1000, mean = 1, sd = 1)
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
plot(rope_values)
posterior <- rnorm_perfect(1000, mean = 0, sd = 1)
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
plot(rope_values)
min_rope <- min(rope_values)
name_max <- names(rope_values[rope_values != max(rope_values)][1])
name_max
CI_position <- match(name_max, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- "accept"
p
strsplit(p, "CI_")
strsplit(p, "CI_", fixed=TRUE)
unlist(strsplit(p, "CI_", fixed=TRUE))
p <- unlist(strsplit(p, "CI_", fixed=TRUE))[2]
p
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
plot(rope_values)
min_rope <- min(rope_values)
if(rope_values[1] == min_rope){
name_min2 <- names(rope_values[rope_values != min_rope][1])
CI_position <- match(name_min2, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- "reject"
} else{
name_max <- names(rope_values[rope_values != max(rope_values)][1])
CI_position <- match(name_max, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- "accept"
}
p <- as.numeric(unlist(strsplit(p, "CI_", fixed=TRUE))[2])
p
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
min_rope <- min(rope_values)
if(rope_values[1] == min_rope){
name_min2 <- names(rope_values[rope_values != min_rope][1])
CI_position <- match(name_min2, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- 1
} else{
name_max <- names(rope_values[rope_values != max(rope_values)][1])
CI_position <- match(name_max, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- -1
}
p <- as.numeric(unlist(strsplit(p, "CI_", fixed=TRUE))[2])
p <- h0*1/p
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
min_rope <- min(rope_values)
if(rope_values[1] == min_rope){
name_min2 <- names(rope_values[rope_values != min_rope][1])
CI_position <- match(name_min2, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- 1
} else{
name_max <- names(rope_values[rope_values != max(rope_values)][1])
CI_position <- match(name_max, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- -1
}
p <- as.numeric(unlist(strsplit(p, "CI_", fixed=TRUE))[2])
p <- h0*1/(p/100)
p
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
min_rope <- min(rope_values)
if(rope_values[1] == min_rope){
name_min2 <- names(rope_values[rope_values != min_rope][1])
CI_position <- match(name_min2, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- 1
} else{
name_max <- names(rope_values[rope_values != max(rope_values)][1])
CI_position <- match(name_max, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- -1
}
print(p)
p <- as.numeric(unlist(strsplit(p, "CI_", fixed=TRUE))[2])
p <- h0*1/(p/100)
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
min_rope <- min(rope_values)
if(rope_values[1] == min_rope){
name_min2 <- names(rope_values[rope_values != min_rope][1])
CI_position <- match(name_min2, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- 1
} else{
name_max <- names(rope_values[rope_values != max(rope_values)][1])
CI_position <- match(name_max, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- -1
}
print(p)
p <- as.numeric(unlist(strsplit(p, "CI_", fixed=TRUE))[2])
p <- h0*1/p
p
1/5
p_rope <- function(posterior, bounds = c(-0.1, 0.1), precision=0.01) {
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
min_rope <- min(rope_values)
if(rope_values[1] == min_rope){
name_min2 <- names(rope_values[rope_values != min_rope][1])
CI_position <- match(name_min2, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- 1
} else{
name_max <- names(rope_values[rope_values != max(rope_values)][1])
CI_position <- match(name_max, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- -1
}
print(p)
p <- as.numeric(unlist(strsplit(p, "CI_", fixed=TRUE))[2])
p <- h0*1/p
return(p)
}
p_rope <- function(posterior, bounds = c(-0.1, 0.1), precision=0.001) {
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
min_rope <- min(rope_values)
if(rope_values[1] == min_rope){
name_min2 <- names(rope_values[rope_values != min_rope][1])
CI_position <- match(name_min2, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- 1
} else{
name_max <- names(rope_values[rope_values != max(rope_values)][1])
CI_position <- match(name_max, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- -1
}
print(p)
p <- as.numeric(unlist(strsplit(p, "CI_", fixed=TRUE))[2])
p <- h0*1/p
return(p)
}
p_rope(posterior=rnorm_perfect(1000, mean = 0, sd = 1), bounds = c(-0.1, 0.1))
posterior=rnorm_perfect(1000, mean = 0, sd = 1)
p_rope <- function(posterior, bounds = c(-0.1, 0.1), precision=0.01) {
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
min_rope <- min(rope_values)
if(rope_values[1] == min_rope){
name_min2 <- names(rope_values[rope_values != min_rope][1])
CI_position <- match(name_min2, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- 1
} else{
name_max <- names(rope_values[rope_values != max(rope_values)][1])
CI_position <- match(name_max, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- -1
}
print(p)
p <- as.numeric(unlist(strsplit(p, "CI_", fixed=TRUE))[2])
p <- h0*1/p
return(p)
}
p_rope(posterior=rnorm_perfect(1000, mean = 0, sd = 1), bounds = c(-0.1, 0.1))
p_rope <- function(posterior, bounds = c(-0.1, 0.1), precision=0.01) {
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
min_rope <- min(rope_values)
if(rope_values[1] == min_rope){
name_min2 <- names(rope_values[rope_values != min_rope][1])
CI_position <- match(name_min2, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- 1
} else{
name_max <- names(rope_values[rope_values != max(rope_values)][1])
CI_position <- match(name_max, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- -1
}
p <- as.numeric(unlist(strsplit(p, "CI_", fixed=TRUE))[2])
p <- h0*1/p
return(p)
}
p_rope <- function(posterior, bounds = c(-0.1, 0.1), precision=0.1) {
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
min_rope <- min(rope_values)
if(rope_values[1] == min_rope){
name_min2 <- names(rope_values[rope_values != min_rope][1])
CI_position <- match(name_min2, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- 1
} else{
name_max <- names(rope_values[rope_values != max(rope_values)][1])
CI_position <- match(name_max, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- -1
}
p <- as.numeric(unlist(strsplit(p, "CI_", fixed=TRUE))[2])
p <- h0*1/p
return(p)
}
p_rope(posterior=rnorm_perfect(1000, mean = 0, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = 5, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = 1, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = -1, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = 0, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = 0, sd = 0.01), bounds = c(-0.1, 0.1))
posterior=rnorm_perfect(1000, mean = 5, sd = 1)
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values
rope_values <- na.omit(unlist(rope_values))
min_rope <- min(rope_values)
all(rope_values == min(rope_values))
p_rope <- function(posterior, bounds = c(-0.1, 0.1), precision=0.1) {
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
if(all(rope_values == min(rope_values))){
return(0)
}
if(all(rope_values == max(rope_values))){
return(-0.0001)
}
min_rope <- min(rope_values)
if(rope_values[1] == min_rope){
name_min2 <- names(rope_values[rope_values != min_rope][1])
CI_position <- match(name_min2, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- 1
} else{
name_max <- names(rope_values[rope_values != max(rope_values)][1])
CI_position <- match(name_max, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- -1
}
p <- as.numeric(unlist(strsplit(p, "CI_", fixed=TRUE))[2])
p <- h0*1/p
return(p)
}
p_rope(posterior=rnorm_perfect(1000, mean = 5, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = 1, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = -1, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = 0, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = 0, sd = 0.01), bounds = c(-0.1, 0.1))
p_rope <- function(posterior, bounds = c(-0.1, 0.1), precision=0.1) {
rope_values <- rope(posterior, bounds, CI=seq(0, 100, by=precision), verbose=FALSE)
rope_values <- na.omit(unlist(rope_values))
if(all(rope_values == min(rope_values))){
return(0)
}
if(all(rope_values == max(rope_values))){
return(-0.001)
}
min_rope <- min(rope_values)
if(rope_values[1] == min_rope){
name_min2 <- names(rope_values[rope_values != min_rope][1])
CI_position <- match(name_min2, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- 0
} else{
name_max <- names(rope_values[rope_values != max(rope_values)][1])
CI_position <- match(name_max, names(rope_values))-1
p <- names(rope_values[CI_position])
h0 <- 1
}
p <- as.numeric(unlist(strsplit(p, "CI_", fixed=TRUE))[2])
p <- h0 + 1/p
return(p)
}
p_rope(posterior=rnorm_perfect(1000, mean = 5, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = 1, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = -1, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = 0, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior=rnorm_perfect(1000, mean = 0, sd = 0.01), bounds = c(-0.1, 0.1))
