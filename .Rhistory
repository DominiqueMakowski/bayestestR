library(bayestestR)
hdi(posterior, ci = c(.80, .90, .95))
posterior <- rnorm(1000)
\dontrun{
hdi(posterior, ci = c(.80, .90, .95))
library(bayestestR)
library(bayestestR)
as.numeric(p_rope(posterior = rnorm_perfect(1000, mean = 1, sd = 1), bounds = c(-0.1, 0.1)))
pkgdown::build_site
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(bayestestR)
library(bayestestR)
rope(rnorm_perfect(1000, 0, 0.001), ci=1)
equivalence_test(rnorm_perfect(1000, 0, 0.001), ci=1)$ROPE_Equivalence
styler::style_pkg()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
3 <= 5
3 <= 5
pkgdown::build_site()
insight::find_parameters(mgcv::gam(Petal.Length ~ s(Petal.Width), data=iris))
summary(mgcv::gam(Petal.Length ~ s(Petal.Width), data=iris))
pkgdown::build_site()
#' rope(model)
#' rope(model, ci = c(.90, .95))
#'
#' library(brms)
#' model <- brms::brm(mpg ~ wt + cyl, data = mtcars)
#' rope(model)
#' rope(model, ci = c(.90, .95))
#' }
#'
#' @export
rope_bounds <- function(model){
}
#' rope(model)
#' rope(model, ci = c(.90, .95))
#'
#' library(brms)
#' model <- brms::brm(mpg ~ wt + cyl, data = mtcars)
#' rope(model)
#' rope(model, ci = c(.90, .95))
#' }
#'
#' @export
rope_bounds <- function(model){
}
#' library(rstanarm)
#' model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars)
model
library(rstanarm)
model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars)
insight::model_info(model)$is_linear
mtcars
model <- rstanarm::stan_glm(vs ~ mpg, data = mtcars, family="binomial")
insight::model_info(model)$is_binomial
pi
0.1 * (pi / sqrt(3))
model <- rstanarm::stan_glm(vs ~ mpg, data = mtcars, family="binomial")
rope_bounds(model)
rope_bounds <- function(model){
if (insight::model_info(model)$is_linear){
bounds <- c(-0.1 * sd(insight::get_response(model)), 0.1 * sd(insight::get_response(model)))
} else if(insight::model_info(model)$is_binomial){
log_odds_equivalent_to_01_d <- 0.1 * (pi / sqrt(3))
bounds <- c(-log_odds_equivalent_to_01_d, log_odds_equivalent_to_01_d)
} else{
bounds <- c(-0.1, 0.1)
}
return(bounds)
}
library(brms)
model <- brms::brm(mpg ~ wt + cyl, data = mtcars)
rope_bounds <- function(model){
if (insight::model_info(model)$is_linear){
bounds <- c(-0.1 * sd(insight::get_response(model)), 0.1 * sd(insight::get_response(model)))
} else if(insight::model_info(model)$is_binomial){
log_odds_equivalent_to_01_d <- 0.1 * (pi / sqrt(3))
bounds <- c(-log_odds_equivalent_to_01_d, log_odds_equivalent_to_01_d)
} else{
bounds <- c(-0.1, 0.1)
}
return(bounds)
}
rope_bounds(model)
library(bayestestR)
pkgdown::build_site()
library(bayestestR)
library(bayestestR)
library(rstanarm)
model <- circus::download_model("lm_1")
rope_bounds(model)
testthat::expect_equal(rope_bounds(model)[1], -0.602, tol=0.1)
model <- circus::download_model("glm_1")
rope_bounds(model)[1]
model <- circus::download_model("glm_1")
hdi(model)
model <- circus::download_model("stan_glm_1")
library(bayestestR)
library(bayestestR)
model <- circus::download_model("stanreg_lm_1")
hdi(model)
model <- circus::download_model("stanreg_lmer_1")
model <- circus::download_model("stanreg_lmer_1")
model <- circus::download_model("stanreg_lmerMod_1")
hdi(model)
library(bayestestR)
rope(posterior = rnorm(1000, 0, 0.01), range = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), range = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 0.01), range = c(-0.1, 0.1))
rope(model, ci = c(.90, .95))
rope(posterior = rnorm(1000, 1, 1), ci = c(.90, .95))
posterior <- rnorm(1000)
hdi(posterior, ci = .90)
hdi(posterior, ci = c(.80, .90, .95))
equivalence_test(posterior = rnorm(1000, 0, 0.01), range = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 0, 1), range = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 1, 0.01), range = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 1, 1), ci = c(.50, .99))
library(bayestestR)
model <- circus::download_model("stanreg_gamm4_1")
rope_range(model)[1]
library(bayestestR)
rope_range(model)[1]
testthat::expect_equal(rope_range(model)[1], -0.043, tol = 0.1)
model <- circus::download_model("stanreg_meanfield_lm_1")
rope_range(model)[1]
model <- circus::download_model("stanreg_fullrank_lm_1")
rope_range(model)[1]
model <- circus::download_model("stanreg_lmerMod_1")
testthat::expect_equal(rope_range(model)[1], -0.602, tol = 0.1)
model <- circus::download_model("stanreg_merMod_1")
rope_range(model)[1]
testthat::expect_equal(rope_range(model)[1], -0.2912962, tol = 0.1)
library(bayestestR)
library(bayestestR)
library(bayestestR)
library(bayestestR)
library(bayestestR)
library(bayestestR)
pkgdown::build_site()
pkgdown::build_site()
