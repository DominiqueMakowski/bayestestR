df <- rbind(df, list[[i]])
}
df
df <- df[c(name, names(df)[names(df) != name])]
as.data.frame(df)
library(bayestestR)
rope(model)
flatten_list(list, name="Parameter")
library(bayestestR)
rope(posterior = rnorm(1000, 0, 0.01), bounds = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), bounds = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 0.01), bounds = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 1), CI = c(90, 95))
rope(model)
rope(model, CI = c(90, 95))
p_rope(posterior = rnorm(1000, mean = 1, sd = 1), bounds = c(-0.1, 0.1))
bounds = "default"
if (all(bounds == "default")) {
bounds <- c(-0.1, 0.1)
} else if (!all(is.numeric(bounds)) | length(bounds) != 2) {
stop("bounds should be 'default' or a vector of 2 numeric values (e.g., c(-0.1, 0.1)).")
}
rope_values <- rope(posterior, bounds, CI = seq(0, 100, by = precision), verbose = FALSE)
precision = 0.1
rope_values <- rope(posterior, bounds, CI = seq(0, 100, by = precision), verbose = FALSE)
bounds
CI = seq(0, 100, by = precision)
verbose = FALSE
rope(posterior, bounds, CI = seq(0, 100, by = precision), verbose = FALSE)
rope_values <- lapply(CI, function(i) {
.rope(posterior, bounds = bounds, CI = i, verbose = verbose)
})
library(bayestestR)
rope_values <- lapply(CI, function(i) {
.rope(posterior, bounds = bounds, CI = i, verbose = verbose)
})
library(bayestestR)
rope_values <- lapply(CI, function(i) {
.rope(posterior, bounds = bounds, CI = i, verbose = verbose)
})
HDI_area <- hdi(posterior, CI, verbose)
HDI_area
hdi(posterior, CI = c(80, 90, 95))
library(bayestestR)
HDI_area <- hdi(posterior, CI, verbose)
HDI_area
library(bayestestR)
hdi(posterior, CI, verbose)
library(bayestestR)
hdi(posterior, CI, verbose)
posterior[posterior >= HDI_area$CI_low & posterior <= HDI_area$CI_high]
anyNA(HDI_area)
HDI_area <- HDI_area[complete.cases(HDI_area), ]
HDI_area <- hdi(posterior, CI, verbose)
HDI_area <- HDI_area[complete.cases(HDI_area), ]
HDI_area
complete.cases(HDI_area)
HDI_area <- na.omit(HDI_area)
View(HDI_area)
View(HDI_area)
HDI_area <- posterior[posterior >= HDI_area$CI_low & posterior <= HDI_area$CI_high]
CI = c(90, 95)
HDI_area <- hdi(posterior, CI, verbose)
HDI_area
HDI_area <- posterior[posterior >= HDI_area$CI_low & posterior <= HDI_area$CI_high]
HDI_area
area_within <- HDI_area[HDI_area >= min(bounds) & HDI_area <= max(bounds)]
rope_percentage <- length(area_within) / length(HDI_area) * 100
rope_percentage
library(bayestestR)
rope(posterior = rnorm(1000, 0, 0.01), bounds = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 0, 1), bounds = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 0.01), bounds = c(-0.1, 0.1))
rope(posterior = rnorm(1000, 1, 1), CI = c(90, 95))
rope(model)
rope(model, CI = c(90, 95))
rope_values <- rope(posterior, bounds, CI = seq(0, 100, by = precision), verbose = FALSE)
rope_values
rope_values <- rope_values[!is.na(rope_values)]
rope_values <- sapply(rope_values, as.numeric)
rope_values <- rope(posterior, bounds, CI = seq(0, 100, by = precision), verbose = FALSE)$ROPE_Percentage
rope_values <- rope_values[!is.na(rope_values)]
rope_values <- na.omit(rope_values)
plot(rope_values$ROPE_Percentage)
rope_values <- rope(posterior, bounds, CI = seq(0, 100, by = precision), verbose = FALSE)
rope_values <- na.omit(rope_values)
plot(rope_values$ROPE_Percentage)
rope_values
rope_values <- na.omit(rope_values)
rope_values
rope_values$ROPE_Percentage <- as.numeric(rope_values$ROPE_Percentage)
rope_values <- na.omit(rope_values)
rope_values
library(bayestestR)
rope_values <- rope(posterior, bounds, CI = seq(0, 100, by = precision), verbose = FALSE)
rope_values <- na.omit(rope_values)
rope_values <- rope(posterior, bounds, CI = seq(0, 100, by = precision), verbose = FALSE)
rope_values <- na.omit(rope_values)
plot(rope_values$ROPE_Percentage)
posterior = rnorm(1000, mean = 1, sd = 1)
bounds <- c(-0.1, 0.1)
rope_values <- rope(posterior, bounds, CI = seq(0, 100, by = precision), verbose = FALSE)
rope_values <- na.omit(rope_values)
plot(rope_values$ROPE_Percentage)
rope_values <- rope_values$ROPE_Percentage
if (all(rope_values == min(rope_values))) {
if (rope_values[1] == 0) {
return(100)
} else {
return(-100)
}
}
min_rope <- min(rope_values)
min_rope <- min(rope_values)
if (rope_values[1] == min_rope) {
name_min2 <- names(rope_values[rope_values != min_rope][1])
CI_position <- match(name_min2, names(rope_values)) - 1
if (CI_position > 1) CI_position <- CI_position - 1
h0 <- 1
} else {
name_max <- names(rope_values[rope_values != max(rope_values)][1])
CI_position <- match(name_max, names(rope_values))
if (CI_position > 1) CI_position <- CI_position - 1
h0 <- -1
}
p <- rope_values$CI[CI_position]
rope_df <- rope(posterior, bounds, CI = seq(0, 100, by = precision), verbose = FALSE)
rope_df <- na.omit(rope_df)
rope_values <- rope_df$ROPE_Percentage
if (all(rope_values == min(rope_values))) {
if (rope_values[1] == 0) {
return(100)
} else {
return(-100)
}
}
min_rope <- min(rope_values)
if (rope_values[1] == min_rope) {
name_min2 <- names(rope_values[rope_values != min_rope][1])
CI_position <- match(name_min2, names(rope_values)) - 1
if (CI_position > 1) CI_position <- CI_position - 1
h0 <- 1
} else {
name_max <- names(rope_values[rope_values != max(rope_values)][1])
CI_position <- match(name_max, names(rope_values))
if (CI_position > 1) CI_position <- CI_position - 1
h0 <- -1
}
rope_values[1]
min_rope
name_min2 <- names(rope_df[rope_values != min_rope][1])
name_min2 <- rope_df$CI[rope_values != min_rope][1]
name_min2
CI_position <- match(name_min2, rope_df$CI) - 1
CI_position
min_rope <- min(rope_values)
if (rope_values[1] == min_rope) {
name_min2 <- rope_df$CI[rope_values != min_rope][1]
CI_position <- match(name_min2, rope_df$CI) - 1
if (CI_position > 1) CI_position <- CI_position - 1
h0 <- 1
} else {
name_max <- rope_df$CI[rope_values != max(rope_values)][1]
CI_position <- match(name_max, rope_df$CI)
if (CI_position > 1) CI_position <- CI_position - 1
h0 <- -1
}
p <- rope_df$CI[CI_position]
p <- as.numeric(unlist(strsplit(p, "CI_", fixed = TRUE))[2])
p
CI_position
p <- as.numeric(unlist(p))
p
p <- h0 * p
library(bayestestR)
p_rope(posterior = rnorm(1000, mean = 1, sd = 1), bounds = c(-0.1, 0.1))
library(bayestestR)
testthat::expect_equal(p_rope(posterior = rnorm_perfect(1000, mean = 5, sd = 1), bounds = c(-0.1, 0.1)), 100, tolerance = 0.01)1
p_rope(posterior = rnorm_perfect(1000, mean = 5, sd = 1)
p_rope(posterior = rnorm_perfect(1000, mean = 5, sd = 1), bounds = c(-0.1, 0.1))
a <- p_rope(posterior = rnorm_perfect(1000, mean = 5, sd = 1), bounds = c(-0.1, 0.1))
as.numeric(a)
class(a)
library(bayestestR)
p_rope(posterior = rnorm(1000, mean = 1, sd = 1), bounds = c(-0.1, 0.1))
p_rope(posterior = rnorm_perfect(1000, mean = 5, sd = 1), bounds = c(-0.1, 0.1))
posterior = rnorm_perfect(1000, mean = 5, sd = 1)
precision = 0.1
bounds <- c(-0.1, 0.1)
rope_df <- rope(posterior, bounds, CI = seq(0, 100, by = precision), verbose = FALSE)
rope_df <- na.omit(rope_df)
rope_values <- rope_df$ROPE_Percentage
if (all(rope_values == min(rope_values))) {
if (rope_values[1] == 0) {
return(100)
} else {
return(-100)
}
}
min_rope <- min(rope_values)
if (rope_values[1] == min_rope) {
name_min2 <- rope_df$CI[rope_values != min_rope][1]
CI_position <- match(name_min2, rope_df$CI) - 1
if (CI_position > 1) CI_position <- CI_position - 1
h0 <- 1
} else {
name_max <- rope_df$CI[rope_values != max(rope_values)][1]
CI_position <- match(name_max, rope_df$CI)
if (CI_position > 1) CI_position <- CI_position - 1
h0 <- -1
}
p <- rope_df$CI[CI_position]
rope_values <- rope_df$ROPE_Percentage
all(rope_values == min(rope_values))
rope_values[1] == 0
library(bayestestR)
posterior = rnorm_perfect(1000, mean = 5, sd = 1)
p_rope(posterior = rnorm_perfect(1000, mean = 5, sd = 1), bounds = c(-0.1, 0.1))
testthat::expect_equal(p_rope(posterior = rnorm_perfect(1000, mean = 5, sd = 1), bounds = c(-0.1, 0.1)), 100, tolerance = 0.01)1
testthat::expect_equal(p_rope(posterior = rnorm_perfect(1000, mean = 5, sd = 1), bounds = c(-0.1, 0.1)), 100, tolerance = 0.01)
testthat::expect_equal(as.numeric(p_rope(posterior = rnorm_perfect(1000, mean = 5, sd = 1), bounds = c(-0.1, 0.1))), 100, tolerance = 0.01)
testthat::expect_equal(as.numeric(p_rope(posterior = rnorm_perfect(1000, mean = 1, sd = 1), bounds = c(-0.1, 0.1))), 63.1, tolerance = 0.01)
testthat::expect_equal(as.numeric(p_rope(posterior = rnorm_perfect(1000, mean = -1, sd = 1), bounds = c(-0.1, 0.1))), 63.1, tolerance = 0.01)
testthat::expect_equal(as.numeric(p_rope(posterior = rnorm_perfect(1000, mean = 0, sd = 1), bounds = c(-0.1, 0.1))), -7.9, tolerance = 0.01)
testthat::expect_equal(as.numeric(p_rope(posterior = rnorm_perfect(1000, mean = 0, sd = 0.01), bounds = c(-0.1, 0.1))), -100, tolerance = 0.01)
equivalence_test(posterior = rnorm(1000, 0, 0.01), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 0, 1), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 1, 0.01), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 1, 1), CI = c(50, 99))
CI = c(50, 99)
posterior = rnorm(1000, 1, 1)
verbose = TRUE
rope_value <- rope(posterior, bounds = bounds, CI = CI)
rope_value
class(rope_value)
rope_value <- sapply(rope_value, as.numeric)
rope_value
rope_df$ROPE_Equivalence <- ifelse(rope_df$ROPE_Percentage == 0, "rejected",
ifelse(rope_df$ROPE_Percentage == 100, "accepted", "undecided")
)
rope_df
rope_df <- rope(posterior, bounds = bounds, CI = CI)
rope_df$ROPE_Equivalence <- ifelse(rope_df$ROPE_Percentage == 0, "rejected",
ifelse(rope_df$ROPE_Percentage == 100, "accepted", "undecided")
)
rope_df
library(bayestestR)
equivalence_test(posterior = rnorm(1000, 0, 0.01), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 0, 1), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 1, 0.01), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 1, 1), CI = c(50, 99))
library(bayestestR)
equivalence_test(posterior = rnorm(1000, 0, 0.01), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 0, 1), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 1, 0.01), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 1, 1), CI = c(50, 99))
library(bayestestR)
equivalence_test(posterior = rnorm(1000, 0, 0.01), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 0, 1), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 1, 0.01), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 1, 1), CI = c(50, 99))
model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars)
equivalence_test(model)
library(bayestestR)
library(bayestestR)
equivalence_test(posterior = rnorm(1000, 0, 0.01), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 0, 1), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 1, 0.01), bounds = c(-0.1, 0.1))
equivalence_test(posterior = rnorm(1000, 1, 1), CI = c(50, 99))
equivalence_test(model)
equivalence_test(model, CI = c(50, 99))
equivalence_test(model, CI = c(50, 100))
hdi(rnorm_perfect(1000), CI = 90)
testthat::expect_equal(hdi(rnorm_perfect(1000), CI = 90)$CI_low[1], -1.64, tolerance = 0.02)
testthat::expect_equal(nrow(hdi(rnorm_perfect(1000), CI = c(80, 90, 95))), 3, tolerance = 0.01)
testthat::expect_equal(hdi(rnorm_perfect(1000), CI = 100)$CI_low[1], -3.09, tolerance = 0.02)
testthat::expect_warning(hdi(c(2, 3, NA)))
testthat::expect_warning(hdi(c(2, 3)))
testthat::expect_warning(hdi(rnorm_perfect(1000), CI = 0.00001))
testthat::expect_warning(hdi(rnorm_perfect(1000), CI = 950))
testthat::expect_warning(hdi(c(rnorm_perfect(1000, 0, 1), rnorm_perfect(1000, 6, 1), rnorm_perfect(1000, 12, 1)), CI = 10))
map_estimate(rnorm_perfect(1000))
map_estimate(rnorm_perfect(1000))
testthat::expect_equal(map_estimate(rnorm_perfect(1000)), 0, tolerance = 0.01)
map_estimate(rnorm_perfect(1000), density=TRUE)
testthat::expect_equal(map_estimate(rnorm_perfect(1000), density=TRUE)$MAP[1], 0, tolerance = 0.01)
set.seed(333)
p_direction <- bayestestR::p_direction(bayestestR::rnorm_perfect(10000, 1, 1))
testthat::expect_equal(as.numeric(p_direction), 84.2, tolerance = 0.1)
testthat::expect_is(p_direction, "p_direction")
testthat::expect_equal(capture.output(print(p_direction)), "pd = 84.14%")
testthat::expect_equal(p_map(rnorm_perfect(1000)), 1, tolerance = 0.01)
as.numeric(p_map(rnorm_perfect(1000)))
testthat::expect_equal(as.numeric(p_map(rnorm_perfect(1000, 1, 1))), 0.62, tolerance = 0.01)
testthat::expect_equal(as.numeric(p_map(rnorm_perfect(1000, 2, 1))), 0.15, tolerance = 0.01)
testthat::expect_equal(as.numeric(p_map(rnorm_perfect(1000, 3, 0.01))), 0, tolerance = 0.01)
testthat::expect_equal(as.numeric(p_rope(posterior = rnorm_perfect(1000, mean = 5, sd = 1), bounds = c(-0.1, 0.1))), 100, tolerance = 0.01)
testthat::expect_equal(as.numeric(p_rope(posterior = rnorm_perfect(1000, mean = 1, sd = 1), bounds = c(-0.1, 0.1))), 63.1, tolerance = 0.01)
testthat::expect_equal(as.numeric(p_rope(posterior = rnorm_perfect(1000, mean = -1, sd = 1), bounds = c(-0.1, 0.1))), 63.1, tolerance = 0.01)
testthat::expect_equal(as.numeric(p_rope(posterior = rnorm_perfect(1000, mean = 0, sd = 1), bounds = c(-0.1, 0.1))), -7.9, tolerance = 0.01)
testthat::expect_equal(as.numeric(p_rope(posterior = rnorm_perfect(1000, mean = 0, sd = 0.01), bounds = c(-0.1, 0.1))), -100, tolerance = 0.01)
testthat::expect_equal(as.numeric(rope(rnorm_perfect(1000, 0, 1))), 8.88, tolerance = 0.01)
testthat::expect_equal(equivalence_test(rnorm_perfect(1000, 0, 1)), "undecided")
equivalence_test(rnorm_perfect(1000, 0, 1))
testthat::expect_equal(equivalence_test(rnorm_perfect(1000, 0, 1))$ROPE_Equivalence, "undecided")
testthat::expect_equal(as.numeric(rope(rnorm_perfect(1000, 2, 0.01))), 0, tolerance = 0.01)
testthat::expect_equal(equivalence_test(rnorm_perfect(1000, 2, 0.01))$ROPE_Equivalence, "rejected")
testthat::expect_equal(as.numeric(rope(rnorm_perfect(1000, 0, 0.001))), 100, tolerance = 0.01)
testthat::expect_equal(equivalence_test(rnorm_perfect(1000, 0, 0.001))$ROPE_Equivalence, "accepted")
as.numeric(rope(rnorm_perfect(1000, 1, 1), CI = c(50, 99))$CI_99)
rope(rnorm_perfect(1000, 1, 1), CI = c(50, 99))
testthat::expect_equal(x$ROPE_Percentage[2], 4.94, tolerance = 0.01)
x <- rope(rnorm_perfect(1000, 1, 1), CI = c(50, 99))
testthat::expect_equal(x$ROPE_Percentage[2], 4.94, tolerance = 0.01)
x <- equivalence_test(rnorm_perfect(1000, 1, 1), CI = c(50, 99))
testthat::expect_equal(x$ROPE_Percentage[2], 4.94, tolerance = 0.01)
testthat::expect_equal(x$ROPE_Equivalence, "undecided")
testthat::expect_equal(x$ROPE_Equivalence[2], "undecided")
testthat::expect_error(rope(rnorm_perfect(1000, 0, 1), bounds = c(0.0, 0.1, 0.2)))
set.seed(333)
testthat::expect_is(rope(rnorm_perfect(1000, 0, 1)), "rope")
testthat::expect_equal(capture.output(print(rope(rnorm_perfect(1000, 0, 1)))), "8.88% of the 90% CI is in ROPE [-0.10, 0.10]")
testthat::expect_error(rope(rnorm_perfect(1000, 0, 1), bounds = c("A", 0.1)))
testthat::expect_equal(as.numeric(rope(rnorm_perfect(1000, 0, 1), bounds = c(-0.1, 0.1))), 8.88, tolerance = 0.01)
testthat::expect_is(hdi(model), "data.frame")
testthat::expect_is(rope(model), "data.frame")
testthat::expect_is(equivalence_test(model), "data.frame")
testthat::expect_is(map_estimate(model), "data.frame")
testthat::expect_is(p_map(model), "data.frame")
testthat::expect_is(p_rope(model), "data.frame")
testthat::expect_is(p_direction(model), "data.frame")
p_rope(model)
bounds = "default"
precision = 0.1
model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars)
if (all(bounds == "default")) {
bounds <- c(-0.1 * sd(insight::get_response(model)), 0.1 * sd(insight::get_response(model)))
} else if (!all(is.numeric(bounds)) | length(bounds) != 2) {
stop("bounds should be 'default' or a vector of 2 numeric values (e.g., c(-0.1, 0.1)).")
}
bounds
list <- sapply(get_parameters(model), p_rope, bounds=bounds, precision=precision, simplify=FALSE)
list
flatten_list(list, name="Parameter")
data.frame(
"Parameter" = find_parameters(model),
"p_MAP" = sapply(get_parameters(model), bounds=bounds, p_rope, precision=precision, simplify=TRUE),
row.names = NULL
)
library(bayestestR)
library(bayestestR)
set.seed(333)
library(rstanarm)
model <- rstanarm::stan_glm(mpg ~ wt + cyl, data = mtcars)
testthat::expect_is(hdi(model), "data.frame")
testthat::expect_is(rope(model), "data.frame")
testthat::expect_is(equivalence_test(model), "data.frame")
testthat::expect_is(map_estimate(model), "data.frame")
testthat::expect_is(p_map(model), "data.frame")
testthat::expect_is(p_rope(model), "data.frame")
testthat::expect_is(p_direction(model), "data.frame")
testthat::expect_is(rope(model), "data.frame")
rope(model)
styler::style_pkg()
library(bayestestR)
library(ggplot2)
library(dplyr)
library("bayestestR")
posterior <- rnorm_perfect(100, 0.4, 0.2)
posterior %>%
density() %>%
as.data.frame() %>%
mutate(fill = ifelse(x < hdi(posterior)[1], "low",
ifelse(x > hdi(posterior)[2], "high", "middle"))) %>%
ggplot(aes(x=x, y=y, fill=fill)) +
geom_ribbon(aes(ymin=0, ymax=y)) +
geom_vline(xintercept=0, linetype="dotted") +
theme_classic() +
scale_y_continuous(expand = c(0, 0), limits = c(0, 2)) +
scale_fill_manual(values=c("high"="#FFC107", "low"="#FFC107", "middle"="#E91E63"), guide=FALSE) +
annotate("text", x=0.4, y=1, label="The 90% HDI", color="white", size=8) +
xlab("\nParameter Value") +
ylab("Probability Density\n")
hdi(posterior)
posterior %>%
density() %>%
as.data.frame() %>%
mutate(fill = ifelse(x < hdi(posterior)$CI_low, "low",
ifelse(x > hdi(posterior)$CI_high, "high", "middle"))) %>%
ggplot(aes(x=x, y=y, fill=fill)) +
geom_ribbon(aes(ymin=0, ymax=y)) +
geom_vline(xintercept=0, linetype="dotted") +
theme_classic() +
scale_y_continuous(expand = c(0, 0), limits = c(0, 2)) +
scale_fill_manual(values=c("high"="#FFC107", "low"="#FFC107", "middle"="#E91E63"), guide=FALSE) +
annotate("text", x=0.4, y=1, label="The 90% HDI", color="white", size=8) +
xlab("\nParameter Value") +
ylab("Probability Density\n")
posterior <- rnorm_perfect(100, 0.4, 0.2)
posterior %>%
density() %>%
as.data.frame() %>%
ggplot(aes(x=x, y=y)) +
geom_ribbon(aes(ymin=0, ymax=y), fill="#FFC107") +
geom_segment(x=0.4, xend=0.4, y=0, yend=map_estimate(posterior)[2], color="#E91E63", size=1) +
geom_point(x=map_estimate(posterior)[1], y=map_estimate(posterior)[2], color="#E91E63", size=5) +
geom_vline(xintercept=0, linetype="dotted") +
theme_classic() +
scale_y_continuous(expand = c(0, 0), limits = c(0, 2)) +
xlab("\nParameter Value") +
ylab("Probability Density\n")
map_estimate(posterior)
map_estimate(posterior, density=TRUE)
posterior %>%
density() %>%
as.data.frame() %>%
ggplot(aes(x=x, y=y)) +
geom_ribbon(aes(ymin=0, ymax=y), fill="#FFC107") +
geom_segment(x=0.4, xend=0.4, y=0, yend=map_estimate(posterior), color="#E91E63", size=1) +
geom_point(x=map_estimate(posterior), y=map_estimate(posterior, density=TRUE)$MAP_density, color="#E91E63", size=5) +
geom_vline(xintercept=0, linetype="dotted") +
theme_classic() +
scale_y_continuous(expand = c(0, 0), limits = c(0, 2)) +
xlab("\nParameter Value") +
ylab("Probability Density\n")
posterior %>%
density() %>%
as.data.frame() %>%
ggplot(aes(x=x, y=y)) +
geom_ribbon(aes(ymin=0, ymax=y), fill="#FFC107") +
geom_segment(x=0.4, xend=0.4, y=0, yend=map_estimate(posterior), color="#E91E63", size=1) +
geom_point(x=map_estimate(posterior), y=map_estimate(posterior, density=TRUE)$MAP_density, color="#E91E63", size=5) +
geom_vline(xintercept=0, linetype="dotted") +
theme_classic() +
scale_y_continuous(expand = c(0, 0), limits = c(0, 2)) +
xlab("\nParameter Value") +
ylab("Probability Density\n")
posterior %>%
density() %>%
as.data.frame() %>%
ggplot(aes(x=x, y=y)) +
geom_ribbon(aes(ymin=0, ymax=y), fill="#FFC107") +
geom_segment(x=0.4, xend=0.4, y=0, yend=map_estimate(posterior, density=TRUE)$MAP_density, color="#E91E63", size=1) +
geom_point(x=map_estimate(posterior), y=map_estimate(posterior, density=TRUE)$MAP_density, color="#E91E63", size=5) +
geom_vline(xintercept=0, linetype="dotted") +
theme_classic() +
scale_y_continuous(expand = c(0, 0), limits = c(0, 2)) +
xlab("\nParameter Value") +
ylab("Probability Density\n")
posterior <- rnorm_perfect(100, 0.4, 0.2)
posterior %>%
density() %>%
as.data.frame() %>%
mutate(fill = ifelse(x < -0.1, "low",
ifelse(x > 0.1, "high", "middle"))) %>%
ggplot(aes(x=x, y=y, fill=fill)) +
geom_ribbon(aes(ymin=0, ymax=y)) +
geom_vline(xintercept=0, linetype="dotted") +
theme_classic() +
scale_y_continuous(expand = c(0, 0), limits = c(0, 2)) +
scale_x_continuous(breaks = c(-0.1, 0.1, 0.4)) +
scale_fill_manual(values=c("high"="#FFC107", "low"="#FFC107", "middle"="#E91E63"), guide=FALSE) +
xlab("\nParameter Value") +
ylab("Probability Density\n")
posterior <- rnorm_perfect(100, 0.4, 0.2)
posterior %>%
density() %>%
as.data.frame() %>%
mutate(fill = ifelse(x < 0, "low", "high")) %>%
ggplot(aes(x=x, y=y, fill=fill)) +
geom_ribbon(aes(ymin=0, ymax=y)) +
geom_vline(xintercept=0, linetype="dotted") +
theme_classic() +
scale_y_continuous(expand = c(0, 0), limits = c(0, 2)) +
scale_fill_manual(values=c("high"="#FFC107", "low"="#E91E63"), guide=FALSE) +
xlab("\nParameter Value") +
ylab("Probability Density\n")
posterior <- rnorm_perfect(100, 0.4, 0.2)
posterior %>%
density() %>%
as.data.frame() %>%
ggplot(aes(x=x, y=y)) +
geom_ribbon(aes(ymin=0, ymax=y), fill="#FFC107") +
geom_segment(x=0.4, xend=0.4, y=0, yend=map_estimate(posterior)[2], color="#E91E63", size=1) +
geom_segment(x=0, xend=0, y=0, yend=density_at(posterior, 0), color="#E91E63", size=1) +
geom_point(x=map_estimate(posterior)[1], y=map_estimate(posterior)[2], color="#E91E63", size=5) +
geom_point(x=0, y=density_at(posterior, 0), color="#E91E63", size=5) +
geom_vline(xintercept=0, linetype="dotted") +
theme_classic() +
scale_y_continuous(expand = c(0, 0), limits = c(0, 2)) +
xlab("\nParameter Value") +
ylab("Probability Density\n")
posterior %>%
density() %>%
as.data.frame() %>%
ggplot(aes(x=x, y=y)) +
geom_ribbon(aes(ymin=0, ymax=y), fill="#FFC107") +
geom_segment(x=0.4, xend=0.4, y=0, yend=map_estimate(posterior, density=TRUE)$MAP_density, color="#E91E63", size=1) +
geom_segment(x=0, xend=0, y=0, yend=density_at(posterior, 0), color="#E91E63", size=1) +
geom_point(x=map_estimate(posterior), y=map_estimate(posterior, density=TRUE)$MAP_density, color="#E91E63", size=5) +
geom_point(x=0, y=density_at(posterior, 0), color="#E91E63", size=5) +
geom_vline(xintercept=0, linetype="dotted") +
theme_classic() +
scale_y_continuous(expand = c(0, 0), limits = c(0, 2)) +
xlab("\nParameter Value") +
ylab("Probability Density\n")
styler::style_pkg
styler::style_pkg()
pkgdown::build_site()
library(brms)
model <- brms::brm(mpg ~ wt + cyl, data = mtcars)
broom::tidy(model)
